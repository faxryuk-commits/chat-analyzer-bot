#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram —á–∞—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from telegram import Bot, Update, Message
from telegram.ext import Application
from database import DatabaseManager
from text_analyzer import TextAnalyzer

logger = logging.getLogger(__name__)

class TelegramHistoryCollector:
    def __init__(self, bot_token: str, db: DatabaseManager, text_analyzer: TextAnalyzer):
        self.bot_token = bot_token
        self.db = db
        self.text_analyzer = text_analyzer
        self.bot = Bot(token=bot_token)
        
    async def collect_real_chat_history(self, chat_id: int, days: int = 45, progress_callback=None) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞
        start_date = datetime.now() - timedelta(days=days)
        
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
            if progress_callback:
                await progress_callback("üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ...")
            
            chat_info = await self.bot.get_chat(chat_id)
            chat_title = chat_info.title if hasattr(chat_info, 'title') else f"–ß–∞—Ç {chat_id}"
            
            if progress_callback:
                await progress_callback(f"üìã –ß–∞—Ç: {chat_title}\nüìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}")
            
            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if progress_callback:
                await progress_callback("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ...")
            
            existing_messages = self.db.get_messages_for_period(chat_id, days)
            existing_count = len(existing_messages)
            
            if existing_count > 0:
                if progress_callback:
                    await progress_callback(f"üìä –ù–∞–π–¥–µ–Ω–æ {existing_count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                users_found = set()
                for message in existing_messages:
                    if message.get('user_id'):
                        users_found.add(message['user_id'])
                
                if progress_callback:
                    await progress_callback(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(users_found)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if existing_count >= 5:
                    if progress_callback:
                        await progress_callback("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã")
                    
                    return {
                        'chat_id': chat_id,
                        'chat_title': chat_title,
                        'messages_collected': existing_count,
                        'users_found': len(users_found),
                        'period_days': days,
                        'start_date': start_date,
                        'end_date': datetime.now(),
                        'source': 'database',
                        'steps_completed': ['chat_info', 'database_check', 'existing_data_analysis']
                    }
            
            # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
            if progress_callback:
                await progress_callback("üìù –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            
            test_data = await self._create_demo_data_with_progress(chat_id, chat_title, days, progress_callback)
            
            if progress_callback:
                await progress_callback("‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
            return {
                'chat_id': chat_id,
                'chat_title': chat_title,
                'messages_collected': test_data['messages_count'],
                'users_found': test_data['users_count'],
                'period_days': days,
                'start_date': start_date,
                'end_date': datetime.now(),
                'source': 'demo_data',
                'steps_completed': ['chat_info', 'database_check', 'demo_data_creation']
            }
        
    def _create_demo_data(self, chat_id: int, chat_title: str, days: int) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞"""
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        demo_users = [
            {'id': 123456789, 'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', 'username': 'ivan_petrov'},
            {'id': 987654321, 'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', 'username': 'maria_sidorova'},
            {'id': 555666777, 'name': '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', 'username': 'alex_kozlov'},
            {'id': 111222333, 'name': '–ï–ª–µ–Ω–∞ –í–æ—Ä–æ–±—å–µ–≤–∞', 'username': 'elena_vorobyeva'},
            {'id': 444555666, 'name': '–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤', 'username': 'dmitry_novikov'}
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        demo_messages = [
            "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?",
            "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –Ω–∞ 80%",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É, –∫–æ–º–∞–Ω–¥–∞!",
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç?",
            "–ö –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é —Ç–æ—á–Ω–æ —Å–¥–∞–º",
            "–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∏–∑–∞–π–Ω—É",
            "–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ",
            "–°–æ–≥–ª–∞—Å–µ–Ω, –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏",
            "–í—Å—Ç—Ä–µ—á–∞ –≤ 15:00, –≤—Å–µ —Å–æ–≥–ª–∞—Å–Ω—ã?",
            "–î–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç!",
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏",
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "–ö–æ–Ω–µ—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!"
        ]
        
        messages_count = 0
        users_count = len(demo_users)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        for i, message_text in enumerate(demo_messages):
            user = demo_users[i % len(demo_users)]
            
            # –°–æ–∑–¥–∞–µ–º timestamp –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π
            message_date = datetime.now() - timedelta(days=days-1, hours=i)
            
            message_data = {
                'message_id': 1000000 + i,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                'chat_id': chat_id,
                'user_id': user['id'],
                'username': user['username'],
                'first_name': user['name'].split()[0],
                'last_name': user['name'].split()[1] if len(user['name'].split()) > 1 else None,
                'display_name': user['name'],
                'text': message_text,
                'date': int(message_date.timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.db.save_message(message_data)
            messages_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.update_user_activity(user['id'], chat_id, message_date, user['name'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_info = {
            'chat_id': chat_id,
            'chat_type': 'supergroup',
            'title': chat_title,
            'username': None,
            'first_name': None,
            'last_name': None,
            'description': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞',
            'member_count': users_count
        }
        self.db.save_chat_info(chat_info)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {messages_count} –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        return {
            'messages_count': messages_count,
            'users_count': users_count
        }
        
    async def _create_demo_data_with_progress(self, chat_id: int, chat_title: str, days: int, progress_callback=None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        
        if progress_callback:
            await progress_callback("üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        demo_users = [
            {'id': 123456789, 'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', 'username': 'ivan_petrov'},
            {'id': 987654321, 'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', 'username': 'maria_sidorova'},
            {'id': 555666777, 'name': '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', 'username': 'alex_kozlov'},
            {'id': 111222333, 'name': '–ï–ª–µ–Ω–∞ –í–æ—Ä–æ–±—å–µ–≤–∞', 'username': 'elena_vorobyeva'},
            {'id': 444555666, 'name': '–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤', 'username': 'dmitry_novikov'}
        ]
        
        if progress_callback:
            await progress_callback(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(demo_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        demo_messages = [
            "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?",
            "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –Ω–∞ 80%",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É, –∫–æ–º–∞–Ω–¥–∞!",
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç?",
            "–ö –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é —Ç–æ—á–Ω–æ —Å–¥–∞–º",
            "–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∏–∑–∞–π–Ω—É",
            "–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ",
            "–°–æ–≥–ª–∞—Å–µ–Ω, –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏",
            "–í—Å—Ç—Ä–µ—á–∞ –≤ 15:00, –≤—Å–µ —Å–æ–≥–ª–∞—Å–Ω—ã?",
            "–î–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç!",
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏",
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "–ö–æ–Ω–µ—á–Ω–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!"
        ]
        
        if progress_callback:
            await progress_callback(f"üí¨ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º {len(demo_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        messages_count = 0
        users_count = len(demo_users)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        for i, message_text in enumerate(demo_messages):
            user = demo_users[i % len(demo_users)]
            
            # –°–æ–∑–¥–∞–µ–º timestamp –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π
            message_date = datetime.now() - timedelta(days=days-1, hours=i)
            
            message_data = {
                'message_id': 1000000 + i,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                'chat_id': chat_id,
                'user_id': user['id'],
                'username': user['username'],
                'first_name': user['name'].split()[0],
                'last_name': user['name'].split()[1] if len(user['name'].split()) > 1 else None,
                'display_name': user['name'],
                'text': message_text,
                'date': int(message_date.timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.db.save_message(message_data)
            messages_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.update_user_activity(user['id'], chat_id, message_date, user['name'])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            if progress_callback and (i + 1) % 5 == 0:
                await progress_callback(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {i + 1}/{len(demo_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        if progress_callback:
            await progress_callback("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_info = {
            'chat_id': chat_id,
            'chat_type': 'supergroup',
            'title': chat_title,
            'username': None,
            'first_name': None,
            'last_name': None,
            'description': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞',
            'member_count': users_count
        }
        self.db.save_chat_info(chat_info)
        
        if progress_callback:
            await progress_callback(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        return {
            'messages_count': messages_count,
            'users_count': users_count
        }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_collected = 0
            users_found = set()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_chat_history –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
                messages = await self._get_chat_messages(chat_id, limit=1000)
                
                for message in messages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    if message.date < start_date:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if self._message_exists_in_db(message.message_id, chat_id):
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_display_name = self._get_user_display_name(message.from_user)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    message_data = {
                        'message_id': message.message_id,
                        'chat_id': message.chat.id,
                        'user_id': message.from_user.id if message.from_user else None,
                        'username': message.from_user.username if message.from_user else None,
                        'first_name': message.from_user.first_name if message.from_user else None,
                        'last_name': message.from_user.last_name if message.from_user else None,
                        'display_name': user_display_name,
                        'text': message.text,
                        'date': int(message.date.timestamp()),
                        'reply_to_message_id': message.reply_to_message.message_id if message.reply_to_message else None,
                        'forward_from_user_id': message.forward_from.id if message.forward_from else None,
                        'is_edited': False,
                        'edit_date': None
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    message_id = self.db.save_message(message_data)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if message.from_user:
                        self.db.update_user_activity(message.from_user.id, chat_id, message.date, user_display_name)
                        users_found.add(message.from_user.id)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    if message.text:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        mentions = self.text_analyzer.extract_mentions(message.text)
                        for mention in mentions:
                            mention_data = {
                                'message_id': message_id,
                                'mentioned_user_id': 0,  # TODO: –Ω–∞–π—Ç–∏ –ø–æ username
                                'mentioned_username': mention,
                                'mention_type': 'username'
                            }
                            self.db.save_mention(mention_data)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏
                        tasks = self.text_analyzer.extract_tasks(message.text)
                        for task in tasks:
                            if task['assigned_to']:
                                task_data = {
                                    'message_id': message_id,
                                    'chat_id': chat_id,
                                    'assigned_by_user_id': message.from_user.id if message.from_user else 0,
                                    'assigned_to_user_id': 0,  # TODO: –Ω–∞–π—Ç–∏ –ø–æ username
                                    'task_text': task['task_text'],
                                    'status': 'pending'
                                }
                                self.db.save_task(task_data)
                    
                    messages_collected += 1
                    
                    if messages_collected % 100 == 0:
                        print(f"üìä –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_collected}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                if existing_count == 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    messages_collected = await self._create_test_data(chat_id, days)
                    users_found.add(98838625)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            print(f"‚úÖ –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_collected}")
            print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_found)}")
            
            return {
                'chat_id': chat_id,
                'chat_title': chat_title,
                'messages_collected': messages_collected,
                'users_found': len(users_found),
                'period_days': days,
                'start_date': start_date,
                'end_date': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
            return {
                'chat_id': chat_id,
                'error': str(e),
                'messages_collected': 0
            }
    
    async def _get_chat_messages(self, chat_id: int, limit: int = 1000) -> List[Message]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await self.bot.get_chat(chat_id)
            
            # –ü—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º webhook –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getUpdates
            # –ü–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ webhook
            logger.info(f"Webhook –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º getUpdates –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
            return []
    
    def _get_user_display_name(self, user) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        if user.username:
            return f"@{user.username}"
        elif user.first_name and user.last_name:
            return f"{user.first_name} {user.last_name}"
        elif user.first_name:
            return user.first_name
        else:
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
    
    def _message_exists_in_db(self, message_id: int, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT COUNT(*) FROM messages 
                    WHERE message_id = ? AND chat_id = ?
                ''', (message_id, chat_id))
                count = cursor.fetchone()[0]
                return count > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def _create_test_data(self, chat_id: int, days: int) -> int:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        test_messages = [
            {
                'message_id': 1001,
                'chat_id': chat_id,
                'user_id': 98838625,
                'username': 'admin_user',
                'first_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'last_name': '–°–∏—Å—Ç–µ–º—ã',
                'display_name': '@admin_user',
                'text': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç! –°–µ–≥–æ–¥–Ω—è –æ–±—Å—É–¥–∏–º –ø–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é.',
                'date': int((datetime.now() - timedelta(days=2, hours=10)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            },
            {
                'message_id': 1002,
                'chat_id': chat_id,
                'user_id': 98838625,
                'username': 'admin_user',
                'first_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'last_name': '–°–∏—Å—Ç–µ–º—ã',
                'display_name': '@admin_user',
                'text': '@ivan_petrov –ø–æ–¥–≥–æ—Ç–æ–≤—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∫ –ø—è—Ç–Ω–∏—Ü–µ',
                'date': int((datetime.now() - timedelta(days=1, hours=15)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            },
            {
                'message_id': 1003,
                'chat_id': chat_id,
                'user_id': 123456789,
                'username': 'ivan_petrov',
                'first_name': '–ò–≤–∞–Ω',
                'last_name': '–ü–µ—Ç—Ä–æ–≤',
                'display_name': '@ivan_petrov',
                'text': '–ü–æ–Ω—è–ª, @admin_user. –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—è—Ç–Ω–∏—Ü–µ.',
                'date': int((datetime.now() - timedelta(days=1, hours=14)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            },
            {
                'message_id': 1004,
                'chat_id': chat_id,
                'user_id': 987654321,
                'username': 'maria_sidorova',
                'first_name': '–ú–∞—Ä–∏—è',
                'last_name': '–°–∏–¥–æ—Ä–æ–≤–∞',
                'display_name': '@maria_sidorova',
                'text': '–ö–æ–ª–ª–µ–≥–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É –≤ 15:00',
                'date': int((datetime.now() - timedelta(hours=2)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            },
            {
                'message_id': 1005,
                'chat_id': chat_id,
                'user_id': 555666777,
                'username': 'alex_kuznetsov',
                'first_name': '–ê–ª–µ–∫—Å–µ–π',
                'last_name': '–ö—É–∑–Ω–µ—Ü–æ–≤',
                'display_name': '@alex_kuznetsov',
                'text': '–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, @maria_sidorova. –ë—É–¥—É –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.',
                'date': int((datetime.now() - timedelta(hours=1)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            }
        ]
        
        messages_collected = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for message_data in test_messages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not self._message_exists_in_db(message_data['message_id'], chat_id):
                message_id = self.db.save_message(message_data)
                messages_collected += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if message_data['text']:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                mentions = self.text_analyzer.extract_mentions(message_data['text'])
                for mention in mentions:
                    mention_data = {
                        'message_id': message_id,
                        'mentioned_user_id': 0,
                        'mentioned_username': mention,
                        'mention_type': 'username'
                    }
                    self.db.save_mention(mention_data)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏
                tasks = self.text_analyzer.extract_tasks(message_data['text'])
                for task in tasks:
                    if task['assigned_to']:
                        task_data = {
                            'message_id': message_id,
                            'chat_id': chat_id,
                            'assigned_by_user_id': message_data['user_id'],
                            'assigned_to_user_id': 0,
                            'task_text': task['task_text'],
                            'status': 'pending'
                        }
                        self.db.save_task(task_data)
        
        return messages_collected

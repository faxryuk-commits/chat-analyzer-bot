#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram —á–∞—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from telegram import Bot, Update, Message
from telegram.ext import Application
from database import DatabaseManager
from text_analyzer import TextAnalyzer

logger = logging.getLogger(__name__)

class TelegramHistoryCollector:
    def __init__(self, bot_token: str, db: DatabaseManager, text_analyzer: TextAnalyzer):
        self.bot_token = bot_token
        self.db = db
        self.text_analyzer = text_analyzer
        self.bot = Bot(token=bot_token)
        
    async def collect_real_chat_history(self, chat_id: int, days: int = 45) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
        
        print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞
        start_date = datetime.now() - timedelta(days=days)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await self.bot.get_chat(chat_id)
            chat_title = chat_info.title if hasattr(chat_info, 'title') else f"–ß–∞—Ç {chat_id}"
            
            print(f"üìã –ß–∞—Ç: {chat_title}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {datetime.now().strftime('%d.%m.%Y')}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_collected = 0
            users_found = set()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_chat_history –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
                messages = await self._get_chat_messages(chat_id, limit=1000)
                
                for message in messages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    if message.date < start_date:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_display_name = self._get_user_display_name(message.from_user)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    message_data = {
                        'message_id': message.message_id,
                        'chat_id': message.chat.id,
                        'user_id': message.from_user.id if message.from_user else None,
                        'username': message.from_user.username if message.from_user else None,
                        'first_name': message.from_user.first_name if message.from_user else None,
                        'last_name': message.from_user.last_name if message.from_user else None,
                        'display_name': user_display_name,
                        'text': message.text,
                        'date': int(message.date.timestamp()),
                        'reply_to_message_id': message.reply_to_message.message_id if message.reply_to_message else None,
                        'forward_from_user_id': message.forward_from.id if message.forward_from else None,
                        'is_edited': False,
                        'edit_date': None
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    message_id = self.db.save_message(message_data)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if message.from_user:
                        self.db.update_user_activity(message.from_user.id, chat_id, message.date, user_display_name)
                        users_found.add(message.from_user.id)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    if message.text:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        mentions = self.text_analyzer.extract_mentions(message.text)
                        for mention in mentions:
                            mention_data = {
                                'message_id': message_id,
                                'mentioned_user_id': 0,  # TODO: –Ω–∞–π—Ç–∏ –ø–æ username
                                'mentioned_username': mention,
                                'mention_type': 'username'
                            }
                            self.db.save_mention(mention_data)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏
                        tasks = self.text_analyzer.extract_tasks(message.text)
                        for task in tasks:
                            if task['assigned_to']:
                                task_data = {
                                    'message_id': message_id,
                                    'chat_id': chat_id,
                                    'assigned_by_user_id': message.from_user.id if message.from_user else 0,
                                    'assigned_to_user_id': 0,  # TODO: –Ω–∞–π—Ç–∏ –ø–æ username
                                    'task_text': task['task_text'],
                                    'status': 'pending'
                                }
                                self.db.save_task(task_data)
                    
                    messages_collected += 1
                    
                    if messages_collected % 100 == 0:
                        print(f"üìä –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_collected}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                messages_collected = await self._create_test_data(chat_id, days)
                users_found.add(98838625)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            print(f"‚úÖ –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_collected}")
            print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_found)}")
            
            return {
                'chat_id': chat_id,
                'chat_title': chat_title,
                'messages_collected': messages_collected,
                'users_found': len(users_found),
                'period_days': days,
                'start_date': start_date,
                'end_date': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
            return {
                'chat_id': chat_id,
                'error': str(e),
                'messages_collected': 0
            }
    
    async def _get_chat_messages(self, chat_id: int, limit: int = 1000) -> List[Message]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await self.bot.get_chat(chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = []
            offset_id = 0
            
            while len(messages) < limit:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º
                    updates = await self.bot.get_updates(
                        offset=offset_id,
                        limit=100,
                        timeout=10
                    )
                    
                    if not updates:
                        break
                    
                    for update in updates:
                        if update.message and update.message.chat.id == chat_id:
                            messages.append(update.message)
                            
                            if len(messages) >= limit:
                                break
                    
                    if updates:
                        offset_id = updates[-1].update_id + 1
                    else:
                        break
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                    break
            
            return messages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
            return []
    
    def _get_user_display_name(self, user) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        if user.username:
            return f"@{user.username}"
        elif user.first_name and user.last_name:
            return f"{user.first_name} {user.last_name}"
        elif user.first_name:
            return user.first_name
        else:
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
    
    async def _create_test_data(self, chat_id: int, days: int) -> int:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        test_messages = [
            {
                'message_id': 1001,
                'chat_id': chat_id,
                'user_id': 98838625,
                'username': 'admin_user',
                'first_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'last_name': '–°–∏—Å—Ç–µ–º—ã',
                'display_name': '@admin_user',
                'text': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç! –°–µ–≥–æ–¥–Ω—è –æ–±—Å—É–¥–∏–º –ø–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é.',
                'date': int((datetime.now() - timedelta(days=2, hours=10)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            },
            {
                'message_id': 1002,
                'chat_id': chat_id,
                'user_id': 98838625,
                'username': 'admin_user',
                'first_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'last_name': '–°–∏—Å—Ç–µ–º—ã',
                'display_name': '@admin_user',
                'text': '@ivan_petrov –ø–æ–¥–≥–æ—Ç–æ–≤—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∫ –ø—è—Ç–Ω–∏—Ü–µ',
                'date': int((datetime.now() - timedelta(days=1, hours=15)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            },
            {
                'message_id': 1003,
                'chat_id': chat_id,
                'user_id': 123456789,
                'username': 'ivan_petrov',
                'first_name': '–ò–≤–∞–Ω',
                'last_name': '–ü–µ—Ç—Ä–æ–≤',
                'display_name': '@ivan_petrov',
                'text': '–ü–æ–Ω—è–ª, @admin_user. –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—è—Ç–Ω–∏—Ü–µ.',
                'date': int((datetime.now() - timedelta(days=1, hours=14)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            },
            {
                'message_id': 1004,
                'chat_id': chat_id,
                'user_id': 987654321,
                'username': 'maria_sidorova',
                'first_name': '–ú–∞—Ä–∏—è',
                'last_name': '–°–∏–¥–æ—Ä–æ–≤–∞',
                'display_name': '@maria_sidorova',
                'text': '–ö–æ–ª–ª–µ–≥–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É –≤ 15:00',
                'date': int((datetime.now() - timedelta(hours=2)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            },
            {
                'message_id': 1005,
                'chat_id': chat_id,
                'user_id': 555666777,
                'username': 'alex_kuznetsov',
                'first_name': '–ê–ª–µ–∫—Å–µ–π',
                'last_name': '–ö—É–∑–Ω–µ—Ü–æ–≤',
                'display_name': '@alex_kuznetsov',
                'text': '–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, @maria_sidorova. –ë—É–¥—É –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.',
                'date': int((datetime.now() - timedelta(hours=1)).timestamp()),
                'reply_to_message_id': None,
                'forward_from_user_id': None,
                'is_edited': False,
                'edit_date': None
            }
        ]
        
        messages_collected = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for message_data in test_messages:
            message_id = self.db.save_message(message_data)
            messages_collected += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if message_data['text']:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                mentions = self.text_analyzer.extract_mentions(message_data['text'])
                for mention in mentions:
                    mention_data = {
                        'message_id': message_id,
                        'mentioned_user_id': 0,
                        'mentioned_username': mention,
                        'mention_type': 'username'
                    }
                    self.db.save_mention(mention_data)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏
                tasks = self.text_analyzer.extract_tasks(message_data['text'])
                for task in tasks:
                    if task['assigned_to']:
                        task_data = {
                            'message_id': message_id,
                            'chat_id': chat_id,
                            'assigned_by_user_id': message_data['user_id'],
                            'assigned_to_user_id': 0,
                            'task_text': task['task_text'],
                            'status': 'pending'
                        }
                        self.db.save_task(task_data)
        
        return messages_collected

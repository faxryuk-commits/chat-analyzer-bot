import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging
from collections import defaultdict
import numpy as np
from wordcloud import WordCloud
import io
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']

logger = logging.getLogger(__name__)

class ReportGenerator:
    def __init__(self):
        self.colors = {
            'primary': '#2E86AB',
            'secondary': '#A23B72',
            'accent': '#F18F01',
            'success': '#C73E1D',
            'light': '#F8F9FA',
            'dark': '#343A40'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        sns.set_style("whitegrid")
        plt.style.use('seaborn-v0_8')
    
    def generate_daily_report(self, chat_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        report = []
        report.append("üìä **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò**")
        report.append(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}")
        report.append("=" * 50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("\nüìà **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**")
        report.append(f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {chat_data.get('total_messages', 0)}")
        report.append(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {chat_data.get('active_users', 0)}")
        report.append(f"‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {chat_data.get('total_mentions', 0)}")
        
        # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if chat_data.get('top_users'):
            report.append("\nüë• **–¢–û–ü –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**")
            for i, user in enumerate(chat_data['top_users'][:5], 1):
                name = user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}")
                report.append(f"{i}. {name}: {user['messages_count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
        if chat_data.get('popular_topics'):
            report.append("\nüéØ **–ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–ï–ú–´:**")
            for topic, count in chat_data['popular_topics'][:5]:
                report.append(f"‚Ä¢ {topic}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        if chat_data.get('task_stats'):
            task_stats = chat_data['task_stats']
            report.append("\n‚úÖ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß:**")
            report.append(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {task_stats.get('total_tasks', 0)}")
            report.append(f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_stats.get('status_stats', {}).get('completed', 0)}")
            report.append(f"‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {task_stats.get('status_stats', {}).get('pending', 0)}")
            report.append(f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {task_stats.get('overdue_count', 0)}")
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
        if chat_data.get('hourly_activity'):
            report.append("\n‚è∞ **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú:**")
            peak_hour = max(chat_data['hourly_activity'].items(), key=lambda x: x[1])
            report.append(f"‚Ä¢ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {peak_hour[0]}:00 ({peak_hour[1]} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("\nüí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**")
        if chat_data.get('total_messages', 0) < 10:
            report.append("‚Ä¢ –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–Ω–∏—è.")
        
        if chat_data.get('task_stats', {}).get('overdue_count', 0) > 0:
            report.append("‚Ä¢ –ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å.")
        
        if chat_data.get('total_mentions', 0) > 20:
            report.append("‚Ä¢ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç.")
        
        return "\n".join(report)
    
    def generate_weekly_report(self, chat_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        report = []
        report.append("üìä **–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò**")
        report.append(f"üìÖ –ü–µ—Ä–∏–æ–¥: {datetime.now().strftime('%d.%m.%Y')}")
        report.append("=" * 50)
        
        # –¢—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if chat_data.get('activity_trends'):
            report.append("\nüìà **–¢–†–ï–ù–î–´ –ê–ö–¢–ò–í–ù–û–°–¢–ò:**")
            trends = chat_data['activity_trends']
            if trends.get('growth_rate', 0) > 0:
                report.append(f"‚Ä¢ –†–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: +{trends['growth_rate']:.1f}%")
            else:
                report.append(f"‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {trends['growth_rate']:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if chat_data.get('efficiency_metrics'):
            metrics = chat_data['efficiency_metrics']
            report.append("\n‚ö° **–ú–ï–¢–†–ò–ö–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:**")
            report.append(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics.get('avg_response_time', 0):.1f} –º–∏–Ω")
            report.append(f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {metrics.get('task_completion_rate', 0):.1f}%")
        
        return "\n".join(report)
    
    def create_user_activity_chart(self, user_data: List[Dict]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not user_data:
            return ""
        
        plt.figure(figsize=(12, 8))
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        users = []
        messages = []
        colors = []
        
        for i, user in enumerate(user_data[:10]):  # –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            name = user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}")
            users.append(name)
            messages.append(user['messages_count'])
            colors.append(self.colors['primary'] if i < 3 else self.colors['secondary'])
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        bars = plt.bar(users, messages, color=colors, alpha=0.8)
        plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', fontsize=16, fontweight='bold')
        plt.xlabel('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', fontsize=12)
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, msg_count in zip(bars, messages):
            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                    str(msg_count), ha='center', va='bottom', fontweight='bold')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ base64
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        img_str = base64.b64encode(img_buffer.getvalue()).decode()
        plt.close()
        
        return img_str
    
    def create_hourly_activity_chart(self, hourly_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º"""
        if not hourly_data:
            return ""
        
        plt.figure(figsize=(12, 6))
        
        hours = list(range(24))
        activity = [hourly_data.get(hour, 0) for hour in hours]
        
        plt.plot(hours, activity, marker='o', linewidth=3, markersize=8, 
                color=self.colors['primary'])
        plt.fill_between(hours, activity, alpha=0.3, color=self.colors['primary'])
        
        plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º', fontsize=16, fontweight='bold')
        plt.xlabel('–ß–∞—Å –¥–Ω—è', fontsize=12)
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π', fontsize=12)
        plt.grid(True, alpha=0.3)
        plt.xticks(hours[::2])
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        img_str = base64.b64encode(img_buffer.getvalue()).decode()
        plt.close()
        
        return img_str
    
    def create_topic_distribution_chart(self, topic_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º"""
        if not topic_data:
            return ""
        
        plt.figure(figsize=(10, 8))
        
        topics = list(topic_data.keys())
        counts = list(topic_data.values())
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        colors = plt.cm.Set3(np.linspace(0, 1, len(topics)))
        wedges, texts, autotexts = plt.pie(counts, labels=topics, autopct='%1.1f%%',
                                          colors=colors, startangle=90)
        
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è', fontsize=16, fontweight='bold')
        plt.axis('equal')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        img_str = base64.b64encode(img_buffer.getvalue()).decode()
        plt.close()
        
        return img_str
    
    def create_task_status_chart(self, task_stats: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á"""
        if not task_stats:
            return ""
        
        plt.figure(figsize=(8, 8))
        
        statuses = list(task_stats.get('status_stats', {}).keys())
        counts = list(task_stats.get('status_stats', {}).values())
        
        if not statuses:
            return ""
        
        colors = [self.colors['success'] if status == 'completed' else 
                 self.colors['accent'] if status == 'pending' else 
                 self.colors['secondary'] for status in statuses]
        
        wedges, texts, autotexts = plt.pie(counts, labels=statuses, autopct='%1.1f%%',
                                          colors=colors, startangle=90)
        
        plt.title('–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á', fontsize=16, fontweight='bold')
        plt.axis('equal')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        img_str = base64.b64encode(img_buffer.getvalue()).decode()
        plt.close()
        
        return img_str
    
    def create_word_cloud(self, word_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞–∫–æ —Å–ª–æ–≤"""
        if not word_data:
            return ""
        
        plt.figure(figsize=(12, 8))
        
        wordcloud = WordCloud(
            width=800, height=600,
            background_color='white',
            colormap='viridis',
            max_words=100,
            relative_scaling=0.5
        ).generate_from_frequencies(word_data)
        
        plt.imshow(wordcloud, interpolation='bilinear')
        plt.axis('off')
        plt.title('–û–±–ª–∞–∫–æ —Å–ª–æ–≤', fontsize=16, fontweight='bold', pad=20)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        img_str = base64.b64encode(img_buffer.getvalue()).decode()
        plt.close()
        
        return img_str
    
    def generate_task_report(self, tasks: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º"""
        if not tasks:
            return "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
        
        report = []
        report.append("üìã **–û–¢–ß–ï–¢ –ü–û –ó–ê–î–ê–ß–ê–ú**")
        report.append("=" * 30)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        pending_tasks = [t for t in tasks if t['status'] == 'pending']
        completed_tasks = [t for t in tasks if t['status'] == 'completed']
        
        if pending_tasks:
            report.append(f"\n‚è≥ **–í –†–ê–ë–û–¢–ï ({len(pending_tasks)}):**")
            for task in pending_tasks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                assignee = task.get('assigned_to_name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {task['assigned_to_user_id']}")
                report.append(f"‚Ä¢ {task['task_text'][:50]}... (–Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {assignee})")
        
        if completed_tasks:
            report.append(f"\n‚úÖ **–í–´–ü–û–õ–ù–ï–ù–û ({len(completed_tasks)}):**")
            for task in completed_tasks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                assignee = task.get('assigned_to_name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {task['assigned_to_user_id']}")
                report.append(f"‚Ä¢ {task['task_text'][:50]}... (–≤—ã–ø–æ–ª–Ω–∏–ª: {assignee})")
        
        return "\n".join(report)
    
    def generate_mention_report(self, mentions: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º"""
        if not mentions:
            return "üë• –ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥"
        
        report = []
        report.append("üë• **–û–¢–ß–ï–¢ –ü–û –£–ü–û–ú–ò–ù–ê–ù–ò–Ø–ú**")
        report.append("=" * 30)
        
        report.append(f"\nüìä **–¢–û–ü –£–ü–û–ú–ò–ù–ê–ï–ú–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**")
        for i, mention in enumerate(mentions[:5], 1):
            name = mention.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention['mentioned_user_id']}")
            report.append(f"{i}. {name}: {mention['mention_count']} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        return "\n".join(report)
    
    def format_time_spent(self, minutes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ"""
        if minutes < 60:
            return f"{minutes} –º–∏–Ω"
        elif minutes < 1440:  # –º–µ–Ω—å—à–µ –¥–Ω—è
            hours = minutes // 60
            mins = minutes % 60
            return f"{hours}—á {mins}–º–∏–Ω"
        else:
            days = minutes // 1440
            hours = (minutes % 1440) // 60
            return f"{days}–¥ {hours}—á"

#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ Cursor
"""

import os
import time
import json
import requests
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import re
from pathlib import Path
from monitor_config import get_error_patterns, get_ignored_patterns, get_cursor_files, get_error_priority

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LogMonitor:
    def __init__(self, log_file: str = "bot.log", cursor_api_url: str = None):
        self.log_file = log_file
        self.cursor_api_url = cursor_api_url or os.getenv('CURSOR_API_URL')
        self.last_position = 0
        self.error_patterns = get_error_patterns()
        self.ignored_patterns = get_ignored_patterns()
        
    def read_new_logs(self) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                f.seek(self.last_position)
                new_lines = f.readlines()
                self.last_position = f.tell()
                return new_lines
        except FileNotFoundError:
            logger.warning(f"–õ–æ–≥ —Ñ–∞–π–ª {self.log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥ —Ñ–∞–π–ª–∞: {e}")
            return []
    
    def is_error_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ—à–∏–±–∫–æ–π"""
        line_lower = line.lower()
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        for pattern in self.ignored_patterns:
            if re.search(pattern, line, re.IGNORECASE):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        for pattern in self.error_patterns:
            if re.search(pattern, line, re.IGNORECASE):
                return True
        
        return False
    
    def extract_error_context(self, error_lines: List[str]) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏"""
        if not error_lines:
            return {}
        
        # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É
        main_error = error_lines[0].strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp
        timestamp_match = re.search(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', main_error)
        timestamp = timestamp_match.group(1) if timestamp_match else datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        error_type = "Unknown"
        if "Exception" in main_error:
            error_type = "Exception"
        elif "ERROR" in main_error:
            error_type = "Error"
        elif "CRITICAL" in main_error:
            error_type = "Critical"
        elif "‚ùå" in main_error:
            error_type = "User Error"
        
        return {
            "timestamp": timestamp,
            "error_type": error_type,
            "main_error": main_error,
            "full_context": "\n".join(error_lines),
            "log_file": self.log_file
        }
    
    def send_to_cursor(self, error_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ Cursor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if not self.cursor_api_url:
            logger.warning("CURSOR_API_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
            return False
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Cursor
            cursor_message = {
                "type": "error_report",
                "timestamp": datetime.now().isoformat(),
                "error_data": error_data,
                "request": "auto_fix",
                "context": {
                    "project": "telegram-chat-analyzer-bot",
                    "files": get_cursor_files(),
                    "priority": get_error_priority(error_data["error_type"])
                }
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Cursor
            response = requests.post(
                self.cursor_api_url,
                json=cursor_message,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Cursor: {error_data['error_type']}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Cursor: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Cursor: {e}")
            return False
    
    def create_error_report(self, error_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        report = f"""
üö® –û–¢–ß–ï–¢ –û–ë –û–®–ò–ë–ö–ï
==================
üìÖ –í—Ä–µ–º—è: {error_data['timestamp']}
üîç –¢–∏–ø: {error_data['error_type']}
üìÅ –§–∞–π–ª: {error_data['log_file']}

‚ùå –û—à–∏–±–∫–∞:
{error_data['main_error']}

üìã –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
{error_data['full_context']}

üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞

‚è∞ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        return report
    
    def save_error_report(self, error_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ"""
        try:
            reports_dir = Path("error_reports")
            reports_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            report_file = reports_dir / f"error_report_{timestamp}.txt"
            
            report_content = self.create_error_report(error_data)
            
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(report_content)
            
            logger.info(f"–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def monitor(self, interval: int = 30):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {self.log_file}")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ –ª–æ–≥–∏
                new_lines = self.read_new_logs()
                
                if new_lines:
                    # –ò—â–µ–º –æ—à–∏–±–∫–∏
                    error_lines = []
                    for line in new_lines:
                        if self.is_error_line(line):
                            error_lines.append(line)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                    if error_lines:
                        error_data = self.extract_error_context(error_lines)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                        self.save_error_report(error_data)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Cursor
                        self.send_to_cursor(error_data)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º
                        logger.warning(f"–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞: {error_data['error_type']} - {error_data['main_error']}")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(interval)
                
            except KeyboardInterrupt:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(interval)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–æ–∫ –≤ Cursor")
    parser.add_argument("--log-file", default="bot.log", help="–ü—É—Ç—å –∫ –ª–æ–≥ —Ñ–∞–π–ª—É")
    parser.add_argument("--interval", type=int, default=30, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--cursor-url", help="URL API Cursor")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = LogMonitor(
        log_file=args.log_file,
        cursor_api_url=args.cursor_url
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.monitor(interval=args.interval)

if __name__ == "__main__":
    main()

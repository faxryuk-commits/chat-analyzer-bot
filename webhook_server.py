#!/usr/bin/env python3
"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram webhook –≤ –æ–±–ª–∞–∫–µ
"""

import os
import logging
import time
from datetime import datetime
from typing import Dict
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
import threading

from config import BOT_TOKEN, ADMIN_USER_IDS, HISTORY_DAYS, REPORT_TIME, TASK_TIMEOUT_HOURS
from database import DatabaseManager
from text_analyzer import TextAnalyzer
from report_generator import ReportGenerator
from message_collector import MessageCollector
from timezone_utils import timezone_manager
from conversation_analyzer import ConversationAnalyzer
from log_monitor import LogMonitor
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class CloudChatAnalyzerBot:
    def __init__(self):
        self.db = DatabaseManager()
        self.text_analyzer = TextAnalyzer()
        self.report_generator = ReportGenerator()
        self.message_collector = MessageCollector(BOT_TOKEN, self.db, self.text_analyzer)
        self.conversation_analyzer = ConversationAnalyzer()
        self.active_chats = set()
        self.processed_updates = set()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.last_commands = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
        self.log_monitor = LogMonitor(
            log_file="bot.log",
            bot_token=BOT_TOKEN,
            admin_ids=ADMIN_USER_IDS
        )
        self.monitor_thread = threading.Thread(target=self._start_log_monitoring, daemon=True)
        self.monitor_thread.start()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        import asyncio
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        loop.run_until_complete(self.application.initialize())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("report", self.generate_report))
        self.application.add_handler(CommandHandler("tasks", self.show_tasks))
        self.application.add_handler(CommandHandler("mentions", self.show_mentions))
        self.application.add_handler(CommandHandler("activity", self.show_activity))
        self.application.add_handler(CommandHandler("topics", self.show_topics))
        self.application.add_handler(CommandHandler("wordcloud", self.show_wordcloud))
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("collect_history", self.collect_history))
        self.application.add_handler(CommandHandler("collect_chat", self.collect_chat_history))
        self.application.add_handler(CommandHandler("daily_report", self.generate_daily_report))
        self.application.add_handler(CommandHandler("myid", self.show_my_id))
        self.application.add_handler(CommandHandler("setup_monitoring", self.setup_monitoring))
        self.application.add_handler(CommandHandler("groups", self.show_groups))
        self.application.add_handler(CommandHandler("group_report", self.group_report))
        self.application.add_handler(CommandHandler("group_activity", self.group_activity))
        self.application.add_handler(CommandHandler("group_mentions", self.group_mentions))
        self.application.add_handler(CommandHandler("temperature", self.analyze_temperature))
        self.application.add_handler(CommandHandler("status", self.check_status))
        self.application.add_handler(CommandHandler("debug_groups", self.debug_groups))
        self.application.add_handler(CommandHandler("monitor_status", self.monitor_status))
        self.application.add_handler(CommandHandler("monitor_test", self.monitor_test))
        self.application.add_handler(CommandHandler("monitor_summary", self.monitor_summary))
        self.application.add_handler(CommandHandler("monitor_errors", self.monitor_errors))
        self.application.add_handler(CommandHandler("monitor_clear", self.monitor_clear))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        message_id = update.message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if self._is_duplicate_command(user.id, 'start', message_id):
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        chat_type = "–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö" if chat_id > 0 else "–≥—Ä—É–ø–ø–µ"
        
        welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Chat Analyzer Bot!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Ç–∞—Ö.

**üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üìä **–°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∑–∞ {HISTORY_DAYS} –¥–Ω–µ–π
üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** - –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –æ–±—â–∞–µ—Ç—Å—è –∏ –Ω–∞ –∫–∞–∫–∏–µ —Ç–µ–º—ã
üéØ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–º** - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚úÖ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π** - –∫—Ç–æ –∫–æ–≥–æ —á–∞—â–µ –≤—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç
üå°Ô∏è **AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã** - –æ—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞ –±–µ—Å–µ–¥
üìã **–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã** - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

**üì± –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
/report - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
/mentions - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
/activity - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/topics - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
/wordcloud - –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π

**üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö):**
/groups - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
/temperature <ID –≥—Ä—É–ø–ø—ã> - AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –±–µ—Å–µ–¥—ã
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
/myid - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/collect_history - —Å–æ–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
/daily_report - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

**üí° –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /collect_history –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
3. –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /groups –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

**üåê –¢–µ–∫—É—â–∏–π —á–∞—Ç:** {chat_type}
        """
        
        await update.message.reply_text(welcome_message)
        self.active_chats.add(chat_id)
    
    async def help_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        chat_type = "–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö" if chat_id > 0 else "–≥—Ä—É–ø–ø–µ"
        
        help_text = f"""
üìö **–ü–û–î–†–û–ë–ù–ê–Ø –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

**üåê –¢–µ–∫—É—â–∏–π —á–∞—Ç:** {chat_type}

**üì± –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ):**

üìä **–ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç—ã:**
/report [–¥–Ω–∏] - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
/activity - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
/mentions - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/topics - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
/wordcloud - –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π

‚úÖ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:**
/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
/task_add @username –æ–ø–∏—Å–∞–Ω–∏–µ - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/task_complete ID - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
/task_list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á

**üîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í:**

**–í –≥—Ä—É–ø–ø–∞—Ö:**
/collect_history [–¥–Ω–∏] - —Å–æ–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {HISTORY_DAYS} –¥–Ω–µ–π)
/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/myid - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞

**–í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:**
/groups - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
/temperature <ID –≥—Ä—É–ø–ø—ã> - AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –±–µ—Å–µ–¥—ã
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
/daily_report - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

**üìã –î–ï–¢–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ (–≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö):**
/group_report <ID –≥—Ä—É–ø–ø—ã> [–¥–Ω–∏] - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ
/group_activity <ID –≥—Ä—É–ø–ø—ã> [–¥–Ω–∏] - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
/group_mentions <ID –≥—Ä—É–ø–ø—ã> [–¥–Ω–∏] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
/debug_groups - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö

üîç **–ö–û–ú–ê–ù–î–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:**
/monitor_status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/monitor_test - —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/monitor_summary - —Å–≤–æ–¥–∫–∞ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
/monitor_errors - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
/monitor_clear - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)

**üéØ –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:**

**–í –≥—Ä—É–ø–ø–µ:**
/report 7 - –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
/collect_history 30 - —Å–æ–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞ 30 –¥–Ω–µ–π
/task_add @ivan –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –∑–∞–≤—Ç—Ä–∞

**–í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:**
/groups - –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
/temperature -1001335359141 - –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥—Ä—É–ø–ø–µ
/group_report -1001335359141 7 - –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ –∑–∞ –Ω–µ–¥–µ–ª—é

**üí° –ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /groups –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /collect_history –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ –í—Å–µ –æ—Ç—á–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

**üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        """
        
        await update.message.reply_text(help_text)
    
    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return
        
        message = update.message
        chat_id = message.chat.id
        user = message.from_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_display_name = self._get_user_display_name(user)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        message_data = {
            'message_id': message.message_id,
            'chat_id': chat_id,
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'display_name': user_display_name,
            'text': message.text,
            'date': int(message.date.timestamp()),
            'reply_to_message_id': message.reply_to_message.message_id if message.reply_to_message else None,
            'forward_from_user_id': message.forward_from.id if message.forward_from else None,
            'is_edited': False,
            'edit_date': None
        }
        
        message_id = self.db.save_message(message_data)
        self.db.update_user_activity(user.id, chat_id, message.date, user_display_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat_info = {
            'chat_id': chat_id,
            'chat_type': message.chat.type,
            'title': message.chat.title,
            'username': message.chat.username,
            'first_name': message.chat.first_name,
            'last_name': message.chat.last_name,
            'description': getattr(message.chat, 'description', None),
            'member_count': getattr(message.chat, 'member_count', None)
        }
        self.db.save_chat_info(chat_info)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        mentions = self.text_analyzer.extract_mentions(text)
        for mention in mentions:
            mention_data = {
                'message_id': message_id,
                'mentioned_user_id': 0,
                'mentioned_username': mention,
                'mention_type': 'username'
            }
            self.db.save_mention(mention_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = self.text_analyzer.extract_tasks(text)
        for task in tasks:
            if task['assigned_to']:
                task_data = {
                    'message_id': message_id,
                    'chat_id': chat_id,
                    'assigned_by_user_id': user.id,
                    'assigned_to_user_id': 0,
                    'task_text': task['task_text'],
                    'status': 'pending'
                }
                self.db.save_task(task_data)
    
    async def generate_report(self, update: Update, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        message_id = update.message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if self._is_duplicate_command(user_id, 'report', message_id):
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /report –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        
        days = 1
        if context.args:
            try:
                days = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
                return
        
        messages = self.db.get_messages_for_period(chat_id, days)
        user_stats = self.db.get_user_activity_stats(chat_id, days)
        mention_stats = self.db.get_mention_stats(chat_id, days)
        task_stats = self.db.get_task_stats(chat_id, days)
        
        texts = [msg['text'] for msg in messages if msg['text']]
        topic_distribution = self.text_analyzer.get_topic_distribution(texts)
        conversation_flow = self.text_analyzer.analyze_conversation_flow(messages)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        hourly_activity = timezone_manager.get_activity_hours(messages, 'Europe/Moscow')
        
        chat_data = {
            'total_messages': len(messages),
            'active_users': len(user_stats),
            'total_mentions': sum(m['mention_count'] for m in mention_stats),
            'top_users': user_stats[:5],
            'popular_topics': sorted(topic_distribution.items(), key=lambda x: x[1], reverse=True)[:5],
            'task_stats': task_stats,
            'hourly_activity': hourly_activity
        }
        
        report = self.report_generator.generate_daily_report(chat_data)
        await update.message.reply_text(report)
    
    async def show_tasks(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        chat_id = update.effective_chat.id
        tasks = self.db.get_pending_tasks(chat_id)
        
        if not tasks:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
            return
        
        task_report = self.report_generator.generate_task_report(tasks)
        await update.message.reply_text(task_report, parse_mode='Markdown')
    
    async def show_mentions(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        chat_id = update.effective_chat.id
        mentions = self.db.get_mention_stats(chat_id, 7)
        
        mention_report = self.report_generator.generate_mention_report(mentions)
        await update.message.reply_text(mention_report, parse_mode='Markdown')
    
    async def show_activity(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        chat_id = update.effective_chat.id
        user_stats = self.db.get_user_activity_stats(chat_id, 7)
        
        if not user_stats:
            await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        activity_text = "üë• **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**\n\n"
        for i, user in enumerate(user_stats[:10], 1):
            name = user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}")
            time_spent = self.report_generator.format_time_spent(user.get('total_time_minutes', 0))
            activity_text += f"{i}. {name}\n"
            activity_text += f"   üìù –°–æ–æ–±—â–µ–Ω–∏–π: {user['messages_count']}\n"
            activity_text += f"   ‚è± –í—Ä–µ–º—è –≤ —á–∞—Ç–µ: {time_spent}\n\n"
        
        await update.message.reply_text(activity_text, parse_mode='Markdown')
    
    async def show_topics(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã"""
        chat_id = update.effective_chat.id
        messages = self.db.get_messages_for_period(chat_id, 7)
        
        texts = [msg['text'] for msg in messages if msg['text']]
        topic_distribution = self.text_analyzer.get_topic_distribution(texts)
        
        if not topic_distribution:
            await update.message.reply_text("üéØ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–∞—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è")
            return
        
        topics_text = "üéØ **–ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–ï–ú–´:**\n\n"
        for topic, count in sorted(topic_distribution.items(), key=lambda x: x[1], reverse=True):
            topics_text += f"‚Ä¢ {topic}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        
        await update.message.reply_text(topics_text, parse_mode='Markdown')
    
    async def show_wordcloud(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–ª–∞–∫–æ —Å–ª–æ–≤"""
        chat_id = update.effective_chat.id
        messages = self.db.get_messages_for_period(chat_id, 7)
        
        texts = [msg['text'] for msg in messages if msg['text']]
        word_data = self.text_analyzer.generate_word_cloud_data(texts)
        
        if not word_data:
            await update.message.reply_text("‚òÅÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö
        wordcloud_report = "‚òÅÔ∏è **–û–ë–õ–ê–ö–û –°–õ–û–í**\n\n"
        wordcloud_report += f"üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-15 —Å–ª–æ–≤
        for i, (word, count) in enumerate(word_data[:15], 1):
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–æ—Ç—ã
            if count >= 10:
                emoji = "üî•"
            elif count >= 5:
                emoji = "‚≠ê"
            elif count >= 3:
                emoji = "üí¨"
            else:
                emoji = "üìù"
            
            wordcloud_report += f"{i}. {emoji} **{word}** - {count} —Ä–∞–∑\n"
        
        wordcloud_report += f"\nüìà **–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤:** {len(word_data)}"
        wordcloud_report += f"\nüí¨ **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {len(texts)}"
        
        await update.message.reply_text(wordcloud_report, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("complete_task_"):
            task_id = int(query.data.split("_")[2])
            self.db.mark_task_completed(task_id)
            await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    
    async def admin_panel(self, update: Update, context):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        await update.message.reply_text("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
    
    async def collect_history(self, update: Update, context):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_id = update.message.message_id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if self._is_duplicate_command(user_id, 'collect_history', message_id):
            return
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /collect_history –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞
        status_message = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            days = HISTORY_DAYS
            if context.args:
                try:
                    days = int(context.args[0])
                except ValueError:
                    await status_message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
                    return
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async def update_progress(message):
                await status_message.edit_text(f"üîÑ **–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏...**\n\n{message}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            result = await self.message_collector.collect_chat_history(chat_id, days, update_progress)
            
            if result.get('error'):
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏: {result['error']}")
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                source_info = ""
                if result.get('source') == 'database':
                    source_info = " (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)"
                elif result.get('source') == 'demo_data':
                    source_info = " (–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                steps_completed = result.get('steps_completed', [])
                status_emoji = "‚úÖ" if len(steps_completed) > 0 else "‚ö†Ô∏è"
                
                report = f"""
{status_emoji} **–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!**

üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –ß–∞—Ç: {result.get('chat_title', f'ID: {chat_id}')}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {result.get('period_days', days)} –¥–Ω–µ–π
‚Ä¢ –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result.get('messages_collected', 0)}{source_info}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result.get('users_found', 0)}

üìÖ **–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞:**
‚Ä¢ –°: {result.get('start_date', '').strftime('%d.%m.%Y') if result.get('start_date') else 'N/A'}
‚Ä¢ –ü–æ: {result.get('end_date', '').strftime('%d.%m.%Y') if result.get('end_date') else 'N/A'}

üíæ **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ {result.get('source', '–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')}

üîß **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏:**
"""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏
                step_descriptions = {
                    'chat_info': '‚Ä¢ ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ',
                    'database_check': '‚Ä¢ ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
                    'existing_data_analysis': '‚Ä¢ ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ',
                    'demo_data_creation': '‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
                }
                
                for step in steps_completed:
                    if step in step_descriptions:
                        report += step_descriptions[step] + "\n"
                
                report += f"""
üí° **–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/report` - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ `/activity` - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/mentions` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ `/topics` - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ `/wordcloud` - –æ–±–ª–∞–∫–æ —Å–ª–æ–≤

üöÄ **–î–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
‚Ä¢ `/groups` - –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ `/temperature` - AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –±–µ—Å–µ–¥—ã
"""
                await status_message.edit_text(report, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
    
    async def collect_chat_history(self, update: Update, context):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        if context.args:
            try:
                chat_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /collect_chat <chat_id>")
                return
        else:
            chat_id = update.effective_chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days = 45
        if len(context.args) > 1:
            try:
                days = int(context.args[1])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π")
                return
        
        await update.message.reply_text(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def collect_async():
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(self.message_collector.collect_chat_history(chat_id, days))
                loop.close()
                return result
            
            import threading
            thread = threading.Thread(target=collect_async)
            thread.start()
            
            await update.message.reply_text("‚úÖ –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    async def generate_daily_report(self, update: Update, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
        if context.args:
            try:
                chat_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /daily_report <chat_id>")
                return
        else:
            chat_id = update.effective_chat.id
        
        await update.message.reply_text(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
        
        try:
            report = await self.message_collector.generate_daily_report(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_text = f"""
üìä **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢**
üìÖ –î–∞—Ç–∞: {report['date']}
üìã –ß–∞—Ç ID: {report['chat_id']}

üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {report['total_messages']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report['active_users']}
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {report['total_mentions']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {report['avg_response_time']:.1f} –º–∏–Ω

üë• **–¢–û–ü –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**
"""
            
            for i, user in enumerate(report['top_users'][:3], 1):
                name = user.get('name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}")
                report_text += f"{i}. {name}: {user['messages_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            report_text += "\nüéØ **–ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–ï–ú–´:**\n"
            for topic, count in report['popular_topics'][:3]:
                report_text += f"‚Ä¢ {topic}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            
            if report['task_stats']:
                task_stats = report['task_stats']
                report_text += f"\n‚úÖ **–ó–ê–î–ê–ß–ò:**\n"
                report_text += f"‚Ä¢ –í—Å–µ–≥–æ: {task_stats.get('total_tasks', 0)}\n"
                report_text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_stats.get('status_stats', {}).get('completed', 0)}\n"
                report_text += f"‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {task_stats.get('status_stats', {}).get('pending', 0)}\n"
            
            await update.message.reply_text(report_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def setup_monitoring(self, update: Update, context):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setup_monitoring <chat_id1> <chat_id2> ...")
            return
        
        chat_ids = []
        for arg in context.args:
            try:
                chat_ids.append(int(arg))
            except ValueError:
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞: {arg}")
                return
        
        await update.message.reply_text(f"üìÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {len(chat_ids)} —á–∞—Ç–æ–≤...")
        
        try:
            await self.message_collector.schedule_daily_collection(chat_ids)
            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —á–∞—Ç–æ–≤: {', '.join(map(str, chat_ids))}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def error_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
    
    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        while True:
            time.sleep(60)
    
    def _start_log_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤")
            self.log_monitor.monitor(interval=30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ª–æ–≥–æ–≤: {e}")
    
    async def handle_webhook(self, update_dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram"""
        update = Update.de_json(update_dict, self.application.bot)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if len(self.processed_updates) > 1000:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            self.processed_updates = set(list(self.processed_updates)[-500:])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if update.message:
            user = update.message.from_user
            chat = update.message.chat
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.update_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤ —á–∞—Ç–µ {chat.id}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ webhook
            import asyncio
            try:
                loop = asyncio.get_running_loop()
            except RuntimeError:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self.application.process_update(update)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.update_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update.update_id}: {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
            pass
    
    def _get_user_display_name(self, user):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user.username:
            return f"@{user.username}"
        elif user.first_name and user.last_name:
            return f"{user.first_name} {user.last_name}"
        elif user.first_name:
            return user.first_name
        else:
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
    
    def _is_duplicate_command(self, user_id: int, command: str, message_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π"""
        user_key = f"{user_id}_{command}"
        last_info = self.last_commands.get(user_key)
        
        if last_info and last_info['message_id'] == message_id:
            logger.info(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        self.last_commands[user_key] = {
            'message_id': message_id,
            'timestamp': time.time()
        }
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        current_time = time.time()
        self.last_commands = {
            k: v for k, v in self.last_commands.items() 
            if current_time - v['timestamp'] < 300
        }
        
        return False
    
    async def show_my_id(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"""
üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**

üë§ **–í–∞—à ID:** `{user.id}`
üë§ **–ò–º—è:** {user.first_name}
üë§ **–§–∞–º–∏–ª–∏—è:** {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üë§ **Username:** @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üîß **–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:** {'‚úÖ –î–∞' if user.id in ADMIN_USER_IDS else '‚ùå –ù–µ—Ç'}

üìã **–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:** {ADMIN_USER_IDS}

üí° **–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
–û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `ADMIN_USER_IDS` –≤ Railway Dashboard
"""
        
        await update.message.reply_text(user_info, parse_mode='Markdown')
    
    async def show_groups(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –±–æ—Ç"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í–∞—à ID: {user_id}\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_USER_IDS}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id > 0:
            # –≠—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã
            pass
        else:
            # –≠—Ç–æ –≥—Ä—É–ø–ø–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text("üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        groups = self.db.get_monitored_groups()
        
        if not groups:
            await update.message.reply_text("üìã –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/collect_history` –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
            return
        
        groups_info = "üìã **–ì–†–£–ü–ü–´ –ü–û–î –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú:**\n\n"
        
        for i, group in enumerate(groups, 1):
            group_id = group['chat_id']
            group_title = group.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')
            chat_type = group.get('chat_type', '–≥—Ä—É–ø–ø–∞')
            messages_count = group.get('messages_count', 0)
            users_count = group.get('users_count', 0)
            member_count = group.get('member_count', 0)
            last_activity = group.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            groups_info += f"{i}. **{group_title}**\n"
            groups_info += f"   üìã –¢–∏–ø: {chat_type}\n"
            groups_info += f"   üÜî ID: `{group_id}`\n"
            groups_info += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
            groups_info += f"   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            if member_count:
                groups_info += f"   üë§ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
            groups_info += f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
        
        groups_info += "üí° **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        keyboard = []
        for group in groups:
            group_id = group['chat_id']
            group_title = group.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            button_text = group_title[:30] + "..." if len(group_title) > 30 else group_title
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"group_{group_id}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard.append([
            InlineKeyboardButton("üìä –í—Å–µ –æ—Ç—á–µ—Ç—ã", callback_data="all_reports"),
            InlineKeyboardButton("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—Å–µ—Ö", callback_data="all_temperature")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(groups_info, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def group_report(self, update: Update, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
        if chat_id < 0:  # –≠—Ç–æ –≥—Ä—É–ø–ø–∞
            target_chat_id = chat_id
            days = 7
            if context.args:
                try:
                    days = int(context.args[0])
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π. –ü—Ä–∏–º–µ—Ä: `/group_report 7`")
                    return
        else:  # –≠—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not context.args:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
                await self.show_groups(update, context)
                return
            
            try:
                target_chat_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: `/group_report -1001335359141`")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            days = 7
            if len(context.args) > 1:
                try:
                    days = int(context.args[1])
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π")
                    return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        messages = self.db.get_messages_for_period(target_chat_id, days)
        user_stats = self.db.get_user_activity_stats(target_chat_id, days)
        mention_stats = self.db.get_mention_stats(target_chat_id, days)
        task_stats = self.db.get_task_stats(target_chat_id, days)
        
        if not messages:
            await update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã {target_chat_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        texts = [msg['text'] for msg in messages if msg['text']]
        topic_distribution = self.text_analyzer.get_topic_distribution(texts)
        conversation_flow = self.text_analyzer.analyze_conversation_flow(messages)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        hourly_activity = timezone_manager.get_activity_hours(messages, 'Europe/Moscow')
        
        chat_data = {
            'total_messages': len(messages),
            'active_users': len(user_stats),
            'total_mentions': sum(m['mention_count'] for m in mention_stats),
            'top_users': user_stats[:5],
            'popular_topics': sorted(topic_distribution.items(), key=lambda x: x[1], reverse=True)[:5],
            'task_stats': task_stats,
            'hourly_activity': hourly_activity
        }
        
        report = self.report_generator.generate_daily_report(chat_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat_info = self.db.get_chat_info(target_chat_id)
        group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {target_chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {target_chat_id}'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ
        group_info = f"üìä **–û–¢–ß–ï–¢ –ü–û –ì–†–£–ü–ü–ï**\n"
        group_info += f"üìã **{group_title}**\n"
        group_info += f"üÜî ID: `{target_chat_id}`\n"
        group_info += f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n\n"
        
        full_report = group_info + report
        await update.message.reply_text(full_report)
    
    async def group_activity(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: `/group_activity -1001335359141`")
            return
        
        try:
            chat_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        days = 7  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ –Ω–µ–¥–µ–ª—é
        if len(context.args) > 1:
            try:
                days = int(context.args[1])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_stats = self.db.get_user_activity_stats(chat_id, days)
        
        if not user_stats:
            await update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ {chat_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat_info = self.db.get_chat_info(chat_id)
        group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {chat_id}'
        
        activity_info = f"üë• **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ì–†–£–ü–ü–ï**\n"
        activity_info += f"üìã **{group_title}**\n"
        activity_info += f"üÜî ID: `{chat_id}`\n"
        activity_info += f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n\n"
        
        for i, user in enumerate(user_stats[:10], 1):  # –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            display_name = user.get('display_name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}")
            messages_count = user['messages_count']
            total_time = user.get('total_time_minutes', 0)
            
            activity_info += f"{i}. **{display_name}**\n"
            activity_info += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
            activity_info += f"   ‚è± –í—Ä–µ–º—è –≤ —á–∞—Ç–µ: {total_time} –º–∏–Ω\n\n"
        
        await update.message.reply_text(activity_info, parse_mode='Markdown')
    
    async def group_mentions(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: `/group_mentions -1001335359141`")
            return
        
        try:
            chat_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        days = 7  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ –Ω–µ–¥–µ–ª—é
        if len(context.args) > 1:
            try:
                days = int(context.args[1])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        mention_stats = self.db.get_mention_stats(chat_id, days)
        
        if not mention_stats:
            await update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–µ {chat_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat_info = self.db.get_chat_info(chat_id)
        group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {chat_id}'
        
        mentions_info = f"üì¢ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ü–û–ú–ò–ù–ê–ù–ò–ô –í –ì–†–£–ü–ü–ï**\n"
        mentions_info += f"üìã **{group_title}**\n"
        mentions_info += f"üÜî ID: `{chat_id}`\n"
        mentions_info += f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n\n"
        
        for i, mention in enumerate(mention_stats[:10], 1):  # –¢–æ–ø 10 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            username = mention.get('mentioned_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            mention_count = mention['mention_count']
            
            mentions_info += f"{i}. **@{username}**\n"
            mentions_info += f"   üìä –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {mention_count}\n\n"
        
        await update.message.reply_text(mentions_info, parse_mode='Markdown')
    
    async def analyze_temperature(self, update: Update, context):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –±–µ—Å–µ–¥—ã –≤ –≥—Ä—É–ø–ø–µ"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: `/temperature -1001335359141`")
            return
        
        try:
            chat_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        days = 7  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ –Ω–µ–¥–µ–ª—é
        if len(context.args) > 1:
            try:
                days = int(context.args[1])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        messages = self.db.get_messages_for_period(chat_id, days)
        
        if not messages:
            await update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥—Ä—É–ø–ø–µ {chat_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat_info = self.db.get_chat_info(chat_id)
        group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {chat_id}'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        analysis = self.conversation_analyzer.analyze_conversation_temperature(messages, days)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        temperature_emoji = self.conversation_analyzer.get_temperature_emoji(analysis['temperature'])
        
        report = f"""
üå°Ô∏è **–ê–ù–ê–õ–ò–ó –¢–ï–ú–ü–ï–†–ê–¢–£–†–´ –ë–ï–°–ï–î–´**

üìã **–ì—Ä—É–ø–ø–∞:** {group_title}
üÜî **ID:** `{chat_id}`
üìÖ **–ü–µ—Ä–∏–æ–¥:** –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π

{temperature_emoji} **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** **{analysis['temperature']}/10**
üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {analysis['confidence'] * 100:.0f}%

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
{analysis['description']}

üìà **–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {analysis['details']['total_messages']}
‚Ä¢ üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {analysis['details']['emotion_distribution']['positive']}
‚Ä¢ üòî –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {analysis['details']['emotion_distribution']['negative']}
‚Ä¢ üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {analysis['details']['emotion_distribution']['neutral']}
‚Ä¢ ‚ö° –°—Ä–æ—á–Ω—ã—Ö: {analysis['details']['urgency_messages']}
‚Ä¢ ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {analysis['details']['question_messages']}
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–∏–π: {analysis['details']['resolution_messages']}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{self._get_temperature_recommendations(analysis)}
"""
        
        await update.message.reply_text(report, parse_mode='Markdown')
    
    def _get_temperature_recommendations(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        temperature = analysis['temperature']
        details = analysis['details']
        
        recommendations = []
        
        if temperature >= 8.0:
            recommendations.append("‚Ä¢ üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏")
            recommendations.append("‚Ä¢ üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –±–æ–ª–µ–µ —Å–ø–æ–∫–æ–π–Ω–æ–µ —Ä—É—Å–ª–æ")
        elif temperature >= 6.5:
            recommendations.append("‚Ä¢ ‚ö° –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —ç–º–æ—Ü–∏—è–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            recommendations.append("‚Ä¢ ü§ù –ü–æ–æ—â—Ä—è–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥")
        elif temperature <= 3.0:
            recommendations.append("‚Ä¢ ‚ùÑÔ∏è –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–∂–∏–≤–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ")
            recommendations.append("‚Ä¢ üí° –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è")
        
        if details['urgency_messages'] > details['total_messages'] * 0.3:
            recommendations.append("‚Ä¢ ‚è∞ –ú–Ω–æ–≥–æ —Å—Ä–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")
        
        if details['question_messages'] > details['total_messages'] * 0.4:
            recommendations.append("‚Ä¢ ‚ùì –ú–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        if not recommendations:
            recommendations.append("‚Ä¢ ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        
        return "\n".join(recommendations)

    async def check_status(self, update: Update, context):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id <= 0:
            await update.message.reply_text("üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º")
            return
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"""
üîç **–°–¢–ê–¢–£–° –ë–û–¢–ê –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**

üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:**
‚Ä¢ ID: `{user.id}`
‚Ä¢ –ò–º—è: {user.first_name}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üîß **–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:** {'‚úÖ –î–∞' if user.id in ADMIN_USER_IDS else '‚ùå –ù–µ—Ç'}

üìã **–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:** {ADMIN_USER_IDS}

üåê **–¢–∏–ø —á–∞—Ç–∞:** {'–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' if chat_id > 0 else '–ì—Ä—É–ø–ø–∞'}

üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if self.db else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}

ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/myid` - –≤–∞—à ID –∏ –ø—Ä–∞–≤–∞
‚Ä¢ `/groups` - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
‚Ä¢ `/temperature <ID –≥—Ä—É–ø–ø—ã>` - –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞
"""
        
        await update.message.reply_text(user_info, parse_mode='Markdown')

    async def debug_groups(self, update: Update, context):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            groups = self.db.get_monitored_groups()
            
            if not groups:
                await update.message.reply_text("üìã –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            groups_info = f"üîç **–û–¢–õ–ê–î–ö–ê: –ì–†–£–ü–ü–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•**\n\n"
            groups_info += f"üë§ **–ó–∞–ø—Ä–æ—Å–∏–ª:** {user.first_name} (ID: {user.id})\n\n"
            
            for i, group in enumerate(groups, 1):
                group_id = group['chat_id']
                group_title = group.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')
                messages_count = group.get('messages_count', 0)
                users_count = group.get('users_count', 0)
                last_activity = group.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                groups_info += f"{i}. **{group_title}**\n"
                groups_info += f"   üÜî ID: `{group_id}`\n"
                groups_info += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                groups_info += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                groups_info += f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
            
            groups_info += "üí° **–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
            groups_info += f"‚Ä¢ `/temperature {groups[0]['chat_id']}` - –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n"
            groups_info += f"‚Ä¢ `/group_report {groups[0]['chat_id']}` - –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ\n"
            
            await update.message.reply_text(groups_info, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {str(e)}")
    
    async def monitor_status(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_active = hasattr(self, 'log_monitor') and self.log_monitor is not None
        
        status_info = "üîç **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê**\n\n"
        
        if monitor_active:
            status_info += "‚úÖ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω**\n"
            status_info += f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {getattr(self.log_monitor, 'error_counter', 0)}\n"
            status_info += f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: {getattr(self.log_monitor, 'fix_counter', 0)}\n"
        else:
            status_info += "‚ùå **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω**\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        status_info += f"\n‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        status_info += f"üìÅ –õ–æ–≥ —Ñ–∞–π–ª: bot.log\n"
        status_info += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {'‚úÖ' if getattr(self.log_monitor, 'bot_token', None) else '‚ùå'}\n"
        status_info += f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Cursor: {'‚úÖ' if getattr(self.log_monitor, 'cursor_api_url', None) else '‚ùå'}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥ —Ñ–∞–π–ª–∞
        import os
        log_exists = os.path.exists("bot.log")
        status_info += f"üìÑ –õ–æ–≥ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if log_exists else '‚ùå'}\n"
        
        if log_exists:
            log_size = os.path.getsize("bot.log")
            status_info += f"üìè –†–∞–∑–º–µ—Ä –ª–æ–≥ —Ñ–∞–π–ª–∞: {log_size} –±–∞–π—Ç\n"
        
        await update.message.reply_text(status_info, parse_mode='Markdown')
    
    async def monitor_test(self, update: Update, context):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É
        test_error_data = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'error_type': 'Test Error',
            'main_error': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
            'log_file': 'bot.log'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if hasattr(self, 'log_monitor') and self.log_monitor:
            self.log_monitor.send_error_notification(test_error_data)
            await update.message.reply_text("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –≤—ã —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        else:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def monitor_summary(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if hasattr(self, 'log_monitor') and self.log_monitor:
            self.log_monitor.send_daily_summary()
            await update.message.reply_text("üìä –°–≤–æ–¥–∫–∞ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def monitor_errors(self, update: Update, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏
            reports_dir = Path("error_reports")
            if not reports_dir.exists():
                await update.message.reply_text("üìÅ –ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
            report_files = list(reports_dir.glob("error_report_*.txt"))
            report_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            if not report_files:
                await update.message.reply_text("üìÑ –û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
            errors_info = "üö® **–ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò**\n\n"
            
            for i, report_file in enumerate(report_files[:5], 1):
                try:
                    with open(report_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    lines = content.split('\n')
                    error_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    error_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    timestamp = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    for line in lines:
                        if "üîç –¢–∏–ø:" in line:
                            error_type = line.split(":", 1)[1].strip()
                        elif "‚ùå –û—à–∏–±–∫–∞:" in line:
                            error_message = line.split(":", 1)[1].strip()
                        elif "üìÖ –í—Ä–µ–º—è:" in line:
                            timestamp = line.split(":", 1)[1].strip()
                    
                    errors_info += f"{i}. **{error_type}**\n"
                    errors_info += f"   üìÖ {timestamp}\n"
                    errors_info += f"   ‚ùå {error_message[:50]}{'...' if len(error_message) > 50 else ''}\n\n"
                    
                except Exception as e:
                    errors_info += f"{i}. ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}\n\n"
            
            errors_info += f"üìä –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {len(report_files)}"
            
            await update.message.reply_text(errors_info, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")
    
    async def monitor_clear(self, update: Update, context):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_USER_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏
            reports_dir = Path("error_reports")
            if not reports_dir.exists():
                await update.message.reply_text("üìÅ –ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã
            report_files = list(reports_dir.glob("error_report_*.txt"))
            
            if not report_files:
                await update.message.reply_text("üìÑ –û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
            from datetime import datetime, timedelta
            cutoff_date = datetime.now() - timedelta(days=7)
            deleted_count = 0
            
            for report_file in report_files:
                file_time = datetime.fromtimestamp(report_file.stat().st_mtime)
                if file_time < cutoff_date:
                    report_file.unlink()
                    deleted_count += 1
            
            if deleted_count > 0:
                await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö")
            else:
                await update.message.reply_text("üìÑ –°—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤—Å–µ –æ—Ç—á–µ—Ç—ã –Ω–æ–≤–µ–µ 7 –¥–Ω–µ–π)")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")

    async def button_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id not in ADMIN_USER_IDS:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        callback_data = query.data
        
        if callback_data.startswith("group_"):
            # –í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
            chat_id = int(callback_data.split("_")[1])
            await self.show_group_menu(query, chat_id)
        
        elif callback_data == "all_reports":
            # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
            await self.show_all_reports(query)
        
        elif callback_data == "all_temperature":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤—Å–µ—Ö –≥—Ä—É–ø–ø
            await self.show_all_temperature(query)
        
        elif callback_data == "back_to_groups":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø
            await self.show_groups_from_callback(query)
        
        elif callback_data.startswith("action_"):
            # –î–µ–π—Å—Ç–≤–∏–µ —Å –≥—Ä—É–ø–ø–æ–π
            parts = callback_data.split("_")
            action = parts[1]
            chat_id = int(parts[2])
            
            if action == "report":
                await self.show_group_report(query, chat_id)
            elif action == "activity":
                await self.show_group_activity(query, chat_id)
            elif action == "mentions":
                await self.show_group_mentions(query, chat_id)
            elif action == "temperature":
                await self.show_group_temperature(query, chat_id)
            elif action == "back":
                await self.show_group_menu(query, chat_id)

    async def show_group_menu(self, query, chat_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat_info = self.db.get_chat_info(chat_id)
        group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {chat_id}'
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        messages = self.db.get_messages_for_period(chat_id, 7)
        user_stats = self.db.get_user_activity_stats(chat_id, 7)
        
        menu_text = f"""
üìã **–ú–ï–ù–Æ –ì–†–£–ü–ü–´**

üè∑Ô∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {group_title}
üÜî **ID:** `{chat_id}`

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:**
‚Ä¢ üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}
‚Ä¢ üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_stats)}

üí° **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data=f"action_report_{chat_id}"),
                InlineKeyboardButton("üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data=f"action_activity_{chat_id}")
            ],
            [
                InlineKeyboardButton("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data=f"action_temperature_{chat_id}"),
                InlineKeyboardButton("üì¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"action_mentions_{chat_id}")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back_to_groups")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(menu_text, parse_mode='Markdown', reply_markup=reply_markup)

    async def show_group_report(self, query, chat_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            messages = self.db.get_messages_for_period(chat_id, 7)
            user_stats = self.db.get_user_activity_stats(chat_id, 7)
            mention_stats = self.db.get_mention_stats(chat_id, 7)
            task_stats = self.db.get_task_stats(chat_id, 7)
            
            if not messages:
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            texts = [msg['text'] for msg in messages if msg['text']]
            topic_distribution = self.text_analyzer.get_topic_distribution(texts)
            hourly_activity = timezone_manager.get_activity_hours(messages, 'Europe/Moscow')
            
            chat_data = {
                'total_messages': len(messages),
                'active_users': len(user_stats),
                'total_mentions': sum(m['mention_count'] for m in mention_stats),
                'top_users': user_stats[:5],
                'popular_topics': sorted(topic_distribution.items(), key=lambda x: x[1], reverse=True)[:5],
                'task_stats': task_stats,
                'hourly_activity': hourly_activity
            }
            
            report = self.report_generator.generate_daily_report(chat_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            chat_info = self.db.get_chat_info(chat_id)
            group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {chat_id}'
            
            full_report = f"üìä **–û–¢–ß–ï–¢ –ü–û –ì–†–£–ü–ü–ï**\nüìã **{group_title}**\nüÜî ID: `{chat_id}`\nüìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n{report}"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data=f"action_back_{chat_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(full_report, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

    async def show_group_temperature(self, query, chat_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≥—Ä—É–ø–ø—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            messages = self.db.get_messages_for_period(chat_id, 7)
            
            if not messages:
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
            analysis = self.conversation_analyzer.analyze_conversation_temperature(messages, 7)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            chat_info = self.db.get_chat_info(chat_id)
            group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {chat_id}'
            
            temperature_emoji = self.conversation_analyzer.get_temperature_emoji(analysis['temperature'])
            
            report = f"""
üå°Ô∏è **–ê–ù–ê–õ–ò–ó –¢–ï–ú–ü–ï–†–ê–¢–£–†–´ –ë–ï–°–ï–î–´**

üìã **–ì—Ä—É–ø–ø–∞:** {group_title}
üÜî **ID:** `{chat_id}`
üìÖ **–ü–µ—Ä–∏–æ–¥:** –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π

{temperature_emoji} **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** **{analysis['temperature']}/10**
üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {analysis['confidence'] * 100:.0f}%

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
{analysis['description']}

üìà **–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {analysis['details']['total_messages']}
‚Ä¢ üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {analysis['details']['emotion_distribution']['positive']}
‚Ä¢ üòî –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {analysis['details']['emotion_distribution']['negative']}
‚Ä¢ üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {analysis['details']['emotion_distribution']['neutral']}
‚Ä¢ ‚ö° –°—Ä–æ—á–Ω—ã—Ö: {analysis['details']['urgency_messages']}
‚Ä¢ ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {analysis['details']['question_messages']}
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–∏–π: {analysis['details']['resolution_messages']}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{self._get_temperature_recommendations(analysis)}
"""
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data=f"action_back_{chat_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(report, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {str(e)}")

    async def show_group_activity(self, query, chat_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            user_stats = self.db.get_user_activity_stats(chat_id, 7)
            
            if not user_stats:
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            chat_info = self.db.get_chat_info(chat_id)
            group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {chat_id}'
            
            activity_info = f"üë• **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ì–†–£–ü–ü–ï**\n\nüìã **{group_title}**\nüÜî ID: `{chat_id}`\nüìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n"
            
            for i, user in enumerate(user_stats[:10], 1):  # –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                display_name = user.get('display_name', '')
                username = user.get('username', '')
                first_name = user.get('first_name', '')
                last_name = user.get('last_name', '')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è
                if display_name and display_name != f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}":
                    user_name = display_name
                elif username:
                    user_name = f"@{username}"
                elif first_name and last_name:
                    user_name = f"{first_name} {last_name}"
                elif first_name:
                    user_name = first_name
                else:
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}"
                
                messages_count = user['messages_count']
                total_time = user.get('total_time_minutes', 0)
                
                activity_info += f"{i}. **{user_name}**\n"
                activity_info += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                activity_info += f"   ‚è± –í—Ä–µ–º—è –≤ —á–∞—Ç–µ: {total_time:.1f} –º–∏–Ω\n\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data=f"action_back_{chat_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(activity_info, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

    async def show_group_mentions(self, query, chat_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            mention_stats = self.db.get_mention_stats(chat_id, 7)
            
            if not mention_stats:
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            chat_info = self.db.get_chat_info(chat_id)
            group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {chat_id}'
            
            mentions_info = f"üì¢ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ü–û–ú–ò–ù–ê–ù–ò–ô –í –ì–†–£–ü–ü–ï**\n\nüìã **{group_title}**\nüÜî ID: `{chat_id}`\nüìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n"
            
            for i, mention in enumerate(mention_stats[:10], 1):  # –¢–æ–ø 10 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
                username = mention.get('mentioned_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                mention_count = mention['mention_count']
                
                mentions_info += f"{i}. **@{username}**\n"
                mentions_info += f"   üìä –£–ø–æ–º–∏–Ω–∞–Ω–∏–π: {mention_count}\n\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data=f"action_back_{chat_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(mentions_info, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {str(e)}")

    async def show_all_reports(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º"""
        try:
            groups = self.db.get_monitored_groups()
            
            if not groups:
                await query.edit_message_text("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            all_reports = "üìä **–û–¢–ß–ï–¢–´ –ü–û –í–°–ï–ú –ì–†–£–ü–ü–ê–ú**\n\n"
            
            for group in groups:
                chat_id = group['chat_id']
                group_title = group.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}')
                messages_count = group.get('messages_count', 0)
                users_count = group.get('users_count', 0)
                
                all_reports += f"üìã **{group_title}**\n"
                all_reports += f"üÜî ID: `{chat_id}`\n"
                all_reports += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                all_reports += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back_to_groups")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(all_reports, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")

    async def show_all_temperature(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
        try:
            groups = self.db.get_monitored_groups()
            
            if not groups:
                await query.edit_message_text("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            all_temperature = "üå°Ô∏è **–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê –í–°–ï–• –ì–†–£–ü–ü**\n\n"
            
            for group in groups:
                chat_id = group['chat_id']
                group_title = group.get('title', f'–ì—Ä—É–ø–ø–∞ {chat_id}')
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                messages = self.db.get_messages_for_period(chat_id, 7)
                
                if messages:
                    analysis = self.conversation_analyzer.analyze_conversation_temperature(messages, 7)
                    temperature_emoji = self.conversation_analyzer.get_temperature_emoji(analysis['temperature'])
                    
                    all_temperature += f"üìã **{group_title}**\n"
                    all_temperature += f"{temperature_emoji} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: **{analysis['temperature']}/10**\n"
                    all_temperature += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n\n"
                else:
                    all_temperature += f"üìã **{group_title}**\n"
                    all_temperature += f"‚ùÑÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back_to_groups")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(all_temperature, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {str(e)}")

    async def show_groups_from_callback(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ callback"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            groups = self.db.get_monitored_groups()
            
            if not groups:
                await query.edit_message_text("üìã –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/collect_history` –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                return
            
            groups_info = "üìã **–ì–†–£–ü–ü–´ –ü–û–î –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú:**\n\n"
            
            for i, group in enumerate(groups, 1):
                group_id = group['chat_id']
                group_title = group.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')
                chat_type = group.get('chat_type', '–≥—Ä—É–ø–ø–∞')
                messages_count = group.get('messages_count', 0)
                users_count = group.get('users_count', 0)
                member_count = group.get('member_count', 0)
                last_activity = group.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                groups_info += f"{i}. **{group_title}**\n"
                groups_info += f"   üìã –¢–∏–ø: {chat_type}\n"
                groups_info += f"   üÜî ID: `{group_id}`\n"
                groups_info += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                groups_info += f"   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                if member_count:
                    groups_info += f"   üë§ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
                groups_info += f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
            
            groups_info += "üí° **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            keyboard = []
            for group in groups:
                group_id = group['chat_id']
                group_title = group.get('title', f'–ì—Ä—É–ø–ø–∞ {group_id}')
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                button_text = group_title[:30] + "..." if len(group_title) > 30 else group_title
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"group_{group_id}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard.append([
                InlineKeyboardButton("üìä –í—Å–µ –æ—Ç—á–µ—Ç—ã", callback_data="all_reports"),
                InlineKeyboardButton("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—Å–µ—Ö", callback_data="all_temperature")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(groups_info, parse_mode='Markdown', reply_markup=reply_markup)
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {str(e)}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
try:
    bot = CloudChatAnalyzerBot()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    bot = None

@app.route('/health')
def health_check():
    """Health check –¥–ª—è Railway"""
    try:
        bot_status = "running" if bot else "initializing"
        return jsonify({
            "status": "healthy", 
            "bot": bot_status, 
            "timestamp": datetime.now().isoformat(),
            "port": os.environ.get('PORT', '5000')
        })
    except Exception as e:
        logger.error(f"Health check error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç
        if bot is None:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return jsonify({"status": "error", "message": "Bot not initialized"}), 500
        
        update_dict = request.get_json()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π webhook
        update_id = update_dict.get('update_id', 'unknown')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {update_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if update_id in bot.processed_updates:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_id}")
            return jsonify({"status": "duplicate"})
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        bot.processed_updates.add(update_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        try:
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ webhook
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
                loop.run_until_complete(bot.handle_webhook(update_dict))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
                try:
                    if not loop.is_closed():
                        loop.close()
                except:
                    pass
            
            logger.info(f"Webhook {update_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook {update_id}: {e}")
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            bot.processed_updates.discard(update_id)
            return jsonify({"status": "error", "message": str(e)})
        
        return jsonify({"status": "ok"})

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        bot_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if bot else "‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
        return f"""
        <h1>ü§ñ Chat Analyzer Bot</h1>
        <p>–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Ç–∞—Ö</p>
        <p>–°—Ç–∞—Ç—É—Å: <strong>{bot_status}</strong></p>
        <p>–í–µ—Ä—Å–∏—è: 1.0.0</p>
        <p>–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        <p>–ü–æ—Ä—Ç: {os.environ.get('PORT', '5000')}</p>
        <p><a href="/health">Health Check</a></p>
        """
    except Exception as e:
        return f"<h1>ü§ñ Chat Analyzer Bot</h1><p>–û—à–∏–±–∫–∞: {str(e)}</p>"

@app.route('/ping')
def ping():
    """–ü—Ä–æ—Å—Ç–æ–π ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    return jsonify({"pong": True, "timestamp": datetime.now().isoformat()})

if __name__ == '__main__':
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 5000))
    
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è Telegram
        webhook_url = os.environ.get('WEBHOOK_URL')
        if webhook_url:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(bot.application.bot.set_webhook(url=f"{webhook_url}/webhook"))
            loop.close()
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}/webhook")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise

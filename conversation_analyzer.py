#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –±–µ—Å–µ–¥ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
"""

import re
import logging
from typing import List, Dict, Tuple
from datetime import datetime, timedelta
from collections import Counter

logger = logging.getLogger(__name__)

class ConversationAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –±–µ—Å–µ–¥"""
    
    def __init__(self):
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        self.positive_markers = [
            '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '—Å—É–ø–µ—Ä', '–∫—Ä—É—Ç–æ', '–∑–¥–æ—Ä–æ–≤–æ',
            '—Å–æ–≥–ª–∞—Å–µ–Ω', '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–≤–µ—Ä–Ω–æ', '—Ç–æ—á–Ω–æ', '–¥–∞', '–¥–∞–≤–∞–π—Ç–µ',
            '–ø–æ–º–æ–∂–µ–º', '—Ä–µ—à–∏–º', '—Å–¥–µ–ª–∞–µ–º', '–≥–æ—Ç–æ–≤', '–º–æ–∂–Ω–æ', '–≤–æ–∑–º–æ–∂–Ω–æ', '–ø–æ–ø—Ä–æ–±—É–µ–º',
            'üëç', '‚úÖ', 'üéâ', 'üòä', 'üòÑ', 'üôÇ', 'üëè', 'üî•', 'üí™', 'üöÄ'
        ]
        
        self.negative_markers = [
            '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–∫–æ—à–º–∞—Ä',
            '–Ω–µ–ª—å–∑—è', '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–æ—à–∏–±–æ—á–Ω–æ', '–Ω–µ–≤–µ—Ä–Ω–æ',
            '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '–ø—Ä–æ—Ç–∏–≤', '–Ω–µ—Ç', '–Ω–µ–ª—å–∑—è', '–∑–∞–ø—Ä–µ—â–µ–Ω–æ', '—Å—Ç–æ–ø',
            '—Ö–≤–∞—Ç–∏—Ç', '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', '–Ω–∞–¥–æ–µ–ª–æ', '—É—Å—Ç–∞–ª', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç',
            'üò°', 'üò†', 'üò§', 'üòû', 'üòî', 'üò¢', 'üò≠', 'üíî', 'üëé', '‚ùå', 'üö´'
        ]
        
        self.urgent_markers = [
            '—Å—Ä–æ—á–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–µ–π—á–∞—Å –∂–µ', '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ',
            '–Ω–µ —Ç–µ—Ä–ø–∏—Ç –æ—Ç–ª–∞–≥–∞—Ç–µ–ª—å—Å—Ç–≤', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–≤–∞–∂–Ω–æ', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            'deadline', '–¥–µ–¥–ª–∞–π–Ω', '—Å—Ä–æ–∫', '–≤—Ä–µ–º—è', '—Ç–æ—Ä–æ–ø–∏–º—Å—è', '—Å–ø–µ—à–∏–º',
            'üî•', '‚ö°', 'üö®', '‚ö†Ô∏è', '‚ùó', '‚ÄºÔ∏è'
        ]
        
        self.question_markers = [
            '?', '–≤–æ–ø—Ä–æ—Å', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º',
            '–∫—Ç–æ', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–æ–µ', '–∫–∞–∫–∏–µ', '—Å–∫–æ–ª—å–∫–æ', '–æ—Ç–∫—É–¥–∞',
            '–∫—É–¥–∞', '–æ—Ç–∫—É–¥–∞', '–∑–∞—á–µ–º', '–ø–æ—á–µ–º—É', '–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º'
        ]
        
        self.resolution_markers = [
            '—Ä–µ—à–∏–ª–∏', '–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', '—Å–æ–≥–ª–∞—Å–æ–≤–∞–ª–∏', '—É—Ç–≤–µ—Ä–¥–∏–ª–∏', '–ø—Ä–∏–Ω—è–ª–∏',
            '–≥–æ—Ç–æ–≤–æ', '—Å–¥–µ–ª–∞–Ω–æ', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–æ–∫–æ–Ω—á–µ–Ω–æ',
            '–∏—Ç–æ–≥', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–≤—ã–≤–æ–¥', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ', '—Ñ–∏–Ω–∞–ª',
            '‚úÖ', 'üéØ', 'üèÅ', 'üéâ', 'üíØ'
        ]
    
    def analyze_conversation_temperature(self, messages: List[Dict], period_days: int = 7) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –±–µ—Å–µ–¥—ã –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            period_days: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        if not messages:
            return {
                'temperature': 5.0,
                'confidence': 0.0,
                'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                'details': {}
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_scores = []
        emotion_counts = {'positive': 0, 'negative': 0, 'neutral': 0}
        urgency_count = 0
        question_count = 0
        resolution_count = 0
        
        for message in messages:
            text = message.get('text', '').lower()
            if not text:
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
            positive_score = self._count_markers(text, self.positive_markers)
            negative_score = self._count_markers(text, self.negative_markers)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
            if positive_score > negative_score:
                emotion_counts['positive'] += 1
                score = min(10, 5 + positive_score - negative_score)
            elif negative_score > positive_score:
                emotion_counts['negative'] += 1
                score = max(0, 5 - (negative_score - positive_score))
            else:
                emotion_counts['neutral'] += 1
                score = 5.0
            
            message_scores.append(score)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å
            if self._count_markers(text, self.urgent_markers) > 0:
                urgency_count += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
            if self._count_markers(text, self.question_markers) > 0:
                question_count += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏—è
            if self._count_markers(text, self.resolution_markers) > 0:
                resolution_count += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        if message_scores:
            avg_temperature = sum(message_scores) / len(message_scores)
        else:
            avg_temperature = 5.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        temperature = self._adjust_temperature(
            avg_temperature, 
            emotion_counts, 
            urgency_count, 
            question_count, 
            resolution_count,
            len(messages)
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = self._calculate_confidence(len(messages), emotion_counts)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = self._generate_temperature_description(temperature, emotion_counts)
        
        return {
            'temperature': round(temperature, 1),
            'confidence': round(confidence, 1),
            'description': description,
            'details': {
                'total_messages': len(messages),
                'emotion_distribution': emotion_counts,
                'urgency_messages': urgency_count,
                'question_messages': question_count,
                'resolution_messages': resolution_count,
                'positive_ratio': emotion_counts['positive'] / max(1, len(messages)),
                'negative_ratio': emotion_counts['negative'] / max(1, len(messages))
            }
        }
    
    def _count_markers(self, text: str, markers: List[str]) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        count = 0
        for marker in markers:
            count += text.count(marker)
        return count
    
    def _adjust_temperature(self, base_temp: float, emotions: Dict, urgency: int, 
                          questions: int, resolutions: int, total_messages: int) -> float:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        temperature = base_temp
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–ø–æ–≤—ã—à–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É)
        if urgency > 0:
            urgency_factor = min(2.0, urgency / max(1, total_messages) * 10)
            temperature += urgency_factor * 0.3
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏–π (—Å–Ω–∏–∂–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É)
        if resolutions > 0:
            resolution_factor = min(2.0, resolutions / max(1, total_messages) * 10)
            temperature -= resolution_factor * 0.2
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        positive_ratio = emotions['positive'] / max(1, total_messages)
        negative_ratio = emotions['negative'] / max(1, total_messages)
        
        if positive_ratio > 0.3:
            temperature += 0.5
        if negative_ratio > 0.3:
            temperature -= 0.5
        
        return max(0.0, min(10.0, temperature))
    
    def _calculate_confidence(self, total_messages: int, emotions: Dict) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        if total_messages < 5:
            return 0.3
        elif total_messages < 10:
            return 0.6
        elif total_messages < 20:
            return 0.8
        else:
            return 0.9
    
    def _generate_temperature_description(self, temperature: float, emotions: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –±–µ—Å–µ–¥—ã"""
        if temperature >= 8.0:
            return "üî• –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - –±—É—Ä–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å —Å–∏–ª—å–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏"
        elif temperature >= 6.5:
            return "‚ö° –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å —ç–º–æ—Ü–∏—è–º–∏"
        elif temperature >= 4.5:
            return "üòê –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - —Å–ø–æ–∫–æ–π–Ω–æ–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
        elif temperature >= 3.0:
            return "üòî –ü–æ–Ω–∏–∂–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - –≤—è–ª–æ–µ –∏–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
        else:
            return "‚ùÑÔ∏è –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - —Ö–æ–ª–æ–¥–Ω–æ–µ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
    
    def get_temperature_emoji(self, temperature: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        if temperature >= 8.0:
            return "üî•"
        elif temperature >= 6.5:
            return "‚ö°"
        elif temperature >= 4.5:
            return "üòê"
        elif temperature >= 3.0:
            return "üòî"
        else:
            return "‚ùÑÔ∏è"

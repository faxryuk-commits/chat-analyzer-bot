#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram —á–∞—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from telegram import Bot, Update
from telegram.ext import Application
from database import DatabaseManager
from text_analyzer import TextAnalyzer

logger = logging.getLogger(__name__)

class MessageCollector:
    def __init__(self, bot_token: str, db: DatabaseManager, text_analyzer: TextAnalyzer):
        self.bot_token = bot_token
        self.db = db
        self.text_analyzer = text_analyzer
        self.bot = Bot(token=bot_token)
        
    async def collect_chat_history(self, chat_id: int, days: int = 45) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        
        print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞
        start_date = datetime.now() - timedelta(days=days)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await self.bot.get_chat(chat_id)
            chat_title = chat_info.title if hasattr(chat_info, 'title') else f"–ß–∞—Ç {chat_id}"
            
            print(f"üìã –ß–∞—Ç: {chat_title}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {datetime.now().strftime('%d.%m.%Y')}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_collected = 0
            users_found = set()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º (Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
            offset = 0
            limit = 100
            
            while True:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏—è)
                    updates = await self.bot.get_updates(
                        offset=offset,
                        limit=limit,
                        timeout=30
                    )
                    
                    if not updates:
                        break
                    
                    for update in updates:
                        if update.message and update.message.chat.id == chat_id:
                            message = update.message
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
                            if message.date < start_date:
                                continue
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            message_data = {
                                'message_id': message.message_id,
                                'chat_id': message.chat.id,
                                'user_id': message.from_user.id if message.from_user else None,
                                'username': message.from_user.username if message.from_user else None,
                                'first_name': message.from_user.first_name if message.from_user else None,
                                'last_name': message.from_user.last_name if message.from_user else None,
                                'text': message.text,
                                'date': int(message.date.timestamp()),
                                'reply_to_message_id': message.reply_to_message.message_id if message.reply_to_message else None,
                                'forward_from_user_id': message.forward_from.id if message.forward_from else None,
                                'is_edited': False,
                                'edit_date': None
                            }
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            message_id = self.db.save_message(message_data)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if message.from_user:
                                self.db.update_user_activity(message.from_user.id, chat_id, message.date)
                                users_found.add(message.from_user.id)
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            if message.text:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                                mentions = self.text_analyzer.extract_mentions(message.text)
                                for mention in mentions:
                                    mention_data = {
                                        'message_id': message_id,
                                        'mentioned_user_id': 0,  # TODO: –Ω–∞–π—Ç–∏ –ø–æ username
                                        'mentioned_username': mention,
                                        'mention_type': 'username'
                                    }
                                    self.db.save_mention(mention_data)
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏
                                tasks = self.text_analyzer.extract_tasks(message.text)
                                for task in tasks:
                                    if task['assigned_to']:
                                        task_data = {
                                            'message_id': message_id,
                                            'chat_id': chat_id,
                                            'assigned_by_user_id': message.from_user.id if message.from_user else 0,
                                            'assigned_to_user_id': 0,  # TODO: –Ω–∞–π—Ç–∏ –ø–æ username
                                            'task_text': task['task_text'],
                                            'status': 'pending'
                                        }
                                        self.db.save_task(task_data)
                            
                            messages_collected += 1
                            
                            if messages_collected % 100 == 0:
                                print(f"üìä –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_collected}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
                    if updates:
                        offset = updates[-1].update_id + 1
                    else:
                        break
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                    break
            
            print(f"‚úÖ –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_collected}")
            print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_found)}")
            
            return {
                'chat_id': chat_id,
                'chat_title': chat_title,
                'messages_collected': messages_collected,
                'users_found': len(users_found),
                'period_days': days,
                'start_date': start_date,
                'end_date': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
            return {
                'chat_id': chat_id,
                'error': str(e),
                'messages_collected': 0
            }
    
    async def collect_all_chats_history(self, chat_ids: List[int], days: int = 45) -> List[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        
        results = []
        
        for chat_id in chat_ids:
            print(f"\n{'='*50}")
            result = await self.collect_chat_history(chat_id, days)
            results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
            await asyncio.sleep(2)
        
        return results
    
    async def generate_daily_report(self, chat_id: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        today = datetime.now().date()
        yesterday = today - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞
        messages = self.db.get_messages_for_period(chat_id, 1)
        user_stats = self.db.get_user_activity_stats(chat_id, 1)
        mention_stats = self.db.get_mention_stats(chat_id, 1)
        task_stats = self.db.get_task_stats(chat_id, 1)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã
        texts = [msg['text'] for msg in messages if msg['text']]
        topic_distribution = self.text_analyzer.get_topic_distribution(texts)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –±–µ—Å–µ–¥—ã
        conversation_flow = self.text_analyzer.analyze_conversation_flow(messages)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = {
            'date': yesterday,
            'chat_id': chat_id,
            'total_messages': len(messages),
            'active_users': len(user_stats),
            'total_mentions': sum(m['mention_count'] for m in mention_stats),
            'top_users': user_stats[:5],
            'popular_topics': sorted(topic_distribution.items(), key=lambda x: x[1], reverse=True)[:5],
            'task_stats': task_stats,
            'hourly_activity': conversation_flow.get('hourly_activity', {}),
            'avg_response_time': conversation_flow.get('avg_response_time', 0)
        }
        
        return report
    
    async def schedule_daily_collection(self, chat_ids: List[int]):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        
        print(f"üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(chat_ids)} —á–∞—Ç–æ–≤...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å APScheduler –∏–ª–∏ Celery
        
        for chat_id in chat_ids:
            print(f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä")
        
        print("üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ 18:00")

#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram —á–∞—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from telegram import Bot, Update
from telegram.ext import Application
from database import DatabaseManager
from text_analyzer import TextAnalyzer

logger = logging.getLogger(__name__)

class MessageCollector:
    def __init__(self, bot_token: str, db: DatabaseManager, text_analyzer: TextAnalyzer):
        self.bot_token = bot_token
        self.db = db
        self.text_analyzer = text_analyzer
        self.bot = Bot(token=bot_token)
        
    async def collect_chat_history(self, chat_id: int, days: int = 45) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        from telegram_history_collector import TelegramHistoryCollector
        
        collector = TelegramHistoryCollector(self.bot_token, self.db, self.text_analyzer)
        return await collector.collect_real_chat_history(chat_id, days)
    
    async def collect_all_chats_history(self, chat_ids: List[int], days: int = 45) -> List[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        
        results = []
        
        for chat_id in chat_ids:
            print(f"\n{'='*50}")
            result = await self.collect_chat_history(chat_id, days)
            results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
            await asyncio.sleep(2)
        
        return results
    
    async def generate_daily_report(self, chat_id: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        today = datetime.now().date()
        yesterday = today - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞
        messages = self.db.get_messages_for_period(chat_id, 1)
        user_stats = self.db.get_user_activity_stats(chat_id, 1)
        mention_stats = self.db.get_mention_stats(chat_id, 1)
        task_stats = self.db.get_task_stats(chat_id, 1)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã
        texts = [msg['text'] for msg in messages if msg['text']]
        topic_distribution = self.text_analyzer.get_topic_distribution(texts)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –±–µ—Å–µ–¥—ã
        conversation_flow = self.text_analyzer.analyze_conversation_flow(messages)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = {
            'date': yesterday,
            'chat_id': chat_id,
            'total_messages': len(messages),
            'active_users': len(user_stats),
            'total_mentions': sum(m['mention_count'] for m in mention_stats),
            'top_users': user_stats[:5],
            'popular_topics': sorted(topic_distribution.items(), key=lambda x: x[1], reverse=True)[:5],
            'task_stats': task_stats,
            'hourly_activity': conversation_flow.get('hourly_activity', {}),
            'avg_response_time': conversation_flow.get('avg_response_time', 0)
        }
        
        return report
    
    async def schedule_daily_collection(self, chat_ids: List[int]):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        
        print(f"üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(chat_ids)} —á–∞—Ç–æ–≤...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å APScheduler –∏–ª–∏ Celery
        
        for chat_id in chat_ids:
            print(f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä")
        
        print("üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ 18:00")

#!/usr/bin/env python3
"""
Chat Analyzer Bot - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Webhook Server
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å event loop –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
"""

import os
import json
import logging
import asyncio
import threading
from datetime import datetime
from typing import Dict, Set
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from config import BOT_TOKEN, ADMIN_USER_IDS, DATABASE_PATH
from database import DatabaseManager
from text_analyzer import TextAnalyzer
from report_generator import ReportGenerator
from task_manager import TaskManager
from conversation_analyzer import ConversationAnalyzer
from timezone_utils import TimezoneManager
from telegram_history_collector import TelegramHistoryCollector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SimpleChatBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot_token = BOT_TOKEN
        self.admin_user_ids = ADMIN_USER_IDS
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db = DatabaseManager(DATABASE_PATH)
        self.text_analyzer = TextAnalyzer()
        self.report_generator = ReportGenerator(self.db, self.text_analyzer)
        self.task_manager = TaskManager(self.db)
        self.conversation_analyzer = ConversationAnalyzer()
        self.timezone_manager = TimezoneManager()
        self.history_collector = TelegramHistoryCollector(self.db, self.text_analyzer, self.bot_token)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(self.bot_token).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_handlers()
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.processed_updates: Set[int] = set()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("myid", self.myid_command))
        self.application.add_handler(CommandHandler("report", self.report_command))
        self.application.add_handler(CommandHandler("activity", self.activity_command))
        self.application.add_handler(CommandHandler("wordcloud", self.wordcloud_command))
        self.application.add_handler(CommandHandler("temperature", self.temperature_command))
        self.application.add_handler(CommandHandler("collect_history", self.collect_history_command))
        self.application.add_handler(CommandHandler("groups", self.groups_command))
        self.application.add_handler(CommandHandler("group_report", self.group_report_command))
        self.application.add_handler(CommandHandler("group_activity", self.group_activity_command))
        self.application.add_handler(CommandHandler("group_mentions", self.group_mentions_command))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Chat Analyzer Bot!**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name} {user.last_name or ''}
üÜî **ID:** {user.id}

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/report` - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
‚Ä¢ `/activity` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ `/wordcloud` - –û–±–ª–∞–∫–æ —Å–ª–æ–≤
‚Ä¢ `/temperature` - –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
‚Ä¢ `/collect_history` - –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ `/myid` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞

üí° **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
        """
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.MARKDOWN)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

**üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê:**
‚Ä¢ `/report` - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
‚Ä¢ `/activity` - –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/wordcloud` - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç–µ
‚Ä¢ `/temperature` - –û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (1-10)

**üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:**
‚Ä¢ `/collect_history [–¥–Ω–∏]` - –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 45)
‚Ä¢ `/myid` - –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞

**üë• –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´:**
‚Ä¢ `/groups` - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø
‚Ä¢ `/group_report [ID –≥—Ä—É–ø–ø—ã] [–¥–Ω–∏]` - –û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ
‚Ä¢ `/group_activity [ID –≥—Ä—É–ø–ø—ã] [–¥–Ω–∏]` - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ
‚Ä¢ `/group_mentions [ID –≥—Ä—É–ø–ø—ã] [–¥–Ω–∏]` - –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ

**üí° –ü–†–ò–ú–ï–†–´:**
‚Ä¢ `/collect_history 30` - —Å–æ–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞ 30 –¥–Ω–µ–π
‚Ä¢ `/group_report -1001234567890 7` - –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ –∑–∞ –Ω–µ–¥–µ–ª—é
        """
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def myid_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = update.effective_user
        is_admin = user.id in self.admin_user_ids
        admin_list = ", ".join(map(str, self.admin_user_ids))
        
        message = f"""
üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**

üë§ **–í–∞—à ID:** {user.id}
üë§ **–ò–º—è:** {user.first_name}
üë§ **–§–∞–º–∏–ª–∏—è:** {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üë§ **Username:** @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üîß **–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:** {'‚úÖ –î–∞' if is_admin else '‚ùå –ù–µ—Ç'}

üìã **–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:** {admin_list}
        """
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    
    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        chat_id = update.effective_chat.id
        
        try:
            messages = self.db.get_messages_for_period(chat_id, 7)
            
            if not messages:
                await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
                return
            
            report = self.report_generator.generate_daily_report(chat_id, 7)
            await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def activity_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        chat_id = update.effective_chat.id
        
        try:
            user_stats = self.db.get_user_activity_stats(chat_id, 7)
            
            if not user_stats:
                await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            activity_report = "üìä **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
            activity_report += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n"
            
            for i, user in enumerate(user_stats[:10], 1):
                display_name = user.get('display_name', '')
                username = user.get('username', '')
                first_name = user.get('first_name', '')
                last_name = user.get('last_name', '')
                
                if display_name and display_name != f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}":
                    user_name = display_name
                elif username:
                    user_name = f"@{username}"
                elif first_name and last_name:
                    user_name = f"{first_name} {last_name}"
                elif first_name:
                    user_name = first_name
                else:
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}"
                
                messages_count = user['messages_count']
                total_time = user.get('total_time_minutes', 0)
                
                activity_report += f"{i}. **{user_name}**\n"
                activity_report += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                activity_report += f"   ‚è± –í—Ä–µ–º—è –≤ —á–∞—Ç–µ: {total_time:.1f} –º–∏–Ω\n\n"
            
            await update.message.reply_text(activity_report, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def wordcloud_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–ª–∞–∫–æ —Å–ª–æ–≤"""
        chat_id = update.effective_chat.id
        
        try:
            messages = self.db.get_messages_for_period(chat_id, 7)
            texts = [msg['text'] for msg in messages if msg['text']]
            word_data = self.text_analyzer.generate_word_cloud_data(texts)
            
            if not word_data:
                await update.message.reply_text("‚òÅÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤")
                return
            
            wordcloud_report = "‚òÅÔ∏è **–û–ë–õ–ê–ö–û –°–õ–û–í**\n\n"
            wordcloud_report += f"üìä **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n\n"
            
            for i, (word, count) in enumerate(word_data[:15], 1):
                if count >= 10:
                    emoji = "üî•"
                elif count >= 5:
                    emoji = "‚≠ê"
                elif count >= 3:
                    emoji = "üí¨"
                else:
                    emoji = "üìù"
                
                wordcloud_report += f"{i}. {emoji} **{word}** - {count} —Ä–∞–∑\n"
            
            wordcloud_report += f"\nüìà **–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤:** {len(word_data)}"
            wordcloud_report += f"\nüí¨ **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {len(texts)}"
            
            await update.message.reply_text(wordcloud_report, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤: {e}")
    
    async def temperature_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –±–µ—Å–µ–¥—ã"""
        chat_id = update.effective_chat.id
        
        try:
            messages = self.db.get_messages_for_period(chat_id, 1)
            
            if not messages:
                await update.message.reply_text("üå°Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –±–µ—Å–µ–¥—ã")
                return
            
            texts = [msg['text'] for msg in messages if msg['text']]
            temperature_result = self.conversation_analyzer.analyze_conversation_temperature(texts)
            
            temp_report = f"""
üå°Ô∏è **–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê –ë–ï–°–ï–î–´**

üìä **–û—Ü–µ–Ω–∫–∞:** {temperature_result['temperature']}/10 {temperature_result['emoji']}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {temperature_result['description']}
üéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {temperature_result['confidence']:.1f}%

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{temperature_result['recommendations']}
            """
            
            await update.message.reply_text(temp_report, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
    
    async def collect_history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if user_id not in self.admin_user_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        days = 45
        if context.args:
            try:
                days = int(context.args[0])
                if days <= 0 or days > 365:
                    await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π")
                return
        
        try:
            status_message = await update.message.reply_text(
                f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ {days} –¥–Ω–µ–π..."
            )
            
            async def progress_callback(message: str):
                try:
                    await status_message.edit_text(message)
                except:
                    pass
            
            result = await self.history_collector.collect_real_chat_history(
                chat_id, days, progress_callback
            )
            
            final_report = f"""
‚úÖ **–°–ë–û–† –ò–°–¢–û–†–ò–ò –ó–ê–í–ï–†–®–ï–ù!**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–æ–±—Ä–∞–Ω–æ: {result['messages_collected']}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: {result['users_found']}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {result['period_days']} –¥–Ω–µ–π
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}

üéØ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/report` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/activity` –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            """
            
            await status_message.edit_text(final_report, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    async def groups_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø"""
        user_id = update.effective_user.id
        
        if user_id not in self.admin_user_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            groups = self.db.get_monitored_groups()
            
            if not groups:
                await update.message.reply_text("üìã –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø")
                return
            
            groups_text = "üìã **–û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–ï –ì–†–£–ü–ü–´**\n\n"
            
            for i, group in enumerate(groups, 1):
                title = group.get('title', f'–ì—Ä—É–ø–ø–∞ {group["chat_id"]}')
                groups_text += f"{i}. **{title}**\n"
                groups_text += f"   üÜî ID: `{group['chat_id']}`\n\n"
            
            await update.message.reply_text(groups_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
    
    async def group_report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if user_id not in self.admin_user_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if chat_id < 0:  # –≠—Ç–æ –≥—Ä—É–ø–ø–∞
            target_chat_id = chat_id
            days = 7
            if context.args:
                try:
                    days = int(context.args[0])
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π")
                    return
        else:  # –≠—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not context.args:
                await self.groups_command(update, context)
                return
            
            try:
                target_chat_id = int(context.args[0])
                days = int(context.args[1]) if len(context.args) > 1 else 7
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return
        
        try:
            messages = self.db.get_messages_for_period(target_chat_id, days)
            user_stats = self.db.get_user_activity_stats(target_chat_id, days)
            
            if not messages:
                await update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã {target_chat_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.")
                return
            
            chat_info = self.db.get_chat_info(target_chat_id)
            group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {target_chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {target_chat_id}'
            
            report = f"""
üìä **–û–¢–ß–ï–¢ –ü–û –ì–†–£–ü–ü–ï: {group_title}**

üìÖ **–ü–µ—Ä–∏–æ–¥:** –ü–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {len(messages)}
üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(user_stats)}

**üë§ –¢–û–ü-5 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**
"""
            
            for i, user in enumerate(user_stats[:5], 1):
                display_name = user.get('display_name', '')
                username = user.get('username', '')
                first_name = user.get('first_name', '')
                last_name = user.get('last_name', '')
                
                if display_name and display_name != f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}":
                    user_name = display_name
                elif username:
                    user_name = f"@{username}"
                elif first_name and last_name:
                    user_name = f"{first_name} {last_name}"
                elif first_name:
                    user_name = first_name
                else:
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}"
                
                messages_count = user['messages_count']
                report += f"{i}. **{user_name}** - {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –≥—Ä—É–ø–ø—ã: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def group_activity_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if user_id not in self.admin_user_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if chat_id < 0:  # –≠—Ç–æ –≥—Ä—É–ø–ø–∞
            target_chat_id = chat_id
            days = 7
            if context.args:
                try:
                    days = int(context.args[0])
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π")
                    return
        else:  # –≠—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã")
                return
            
            try:
                target_chat_id = int(context.args[0])
                days = int(context.args[1]) if len(context.args) > 1 else 7
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return
        
        try:
            user_stats = self.db.get_user_activity_stats(target_chat_id, days)
            chat_info = self.db.get_chat_info(target_chat_id)
            group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {target_chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {target_chat_id}'
            
            if not user_stats:
                await update.message.reply_text(f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ {group_title}")
                return
            
            activity_info = f"üìä **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –í –ì–†–£–ü–ü–ï: {group_title}**\n\n"
            activity_info += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** –ü–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n\n"
            
            for i, user in enumerate(user_stats[:10], 1):
                display_name = user.get('display_name', '')
                username = user.get('username', '')
                first_name = user.get('first_name', '')
                last_name = user.get('last_name', '')
                
                if display_name and display_name != f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}":
                    user_name = display_name
                elif username:
                    user_name = f"@{username}"
                elif first_name and last_name:
                    user_name = f"{first_name} {last_name}"
                elif first_name:
                    user_name = first_name
                else:
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']}"
                
                messages_count = user['messages_count']
                total_time = user.get('total_time_minutes', 0)
                
                activity_info += f"{i}. **{user_name}**\n"
                activity_info += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                activity_info += f"   ‚è± –í—Ä–µ–º—è –≤ —á–∞—Ç–µ: {total_time:.1f} –º–∏–Ω\n\n"
            
            await update.message.reply_text(activity_info, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def group_mentions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if user_id not in self.admin_user_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if chat_id < 0:  # –≠—Ç–æ –≥—Ä—É–ø–ø–∞
            target_chat_id = chat_id
            days = 7
            if context.args:
                try:
                    days = int(context.args[0])
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π")
                    return
        else:  # –≠—Ç–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã")
                return
            
            try:
                target_chat_id = int(context.args[0])
                days = int(context.args[1]) if len(context.args) > 1 else 7
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return
        
        try:
            mention_stats = self.db.get_mention_stats(target_chat_id, days)
            chat_info = self.db.get_chat_info(target_chat_id)
            group_title = chat_info.get('title', f'–ì—Ä—É–ø–ø–∞ {target_chat_id}') if chat_info else f'–ì—Ä—É–ø–ø–∞ {target_chat_id}'
            
            if not mention_stats:
                await update.message.reply_text(f"üì¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–µ {group_title}")
                return
            
            mentions_info = f"üì¢ **–£–ü–û–ú–ò–ù–ê–ù–ò–Ø –í –ì–†–£–ü–ü–ï: {group_title}**\n\n"
            mentions_info += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** –ü–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n\n"
            
            for i, mention in enumerate(mention_stats[:10], 1):
                username = mention.get('username', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention['user_id']}")
                count = mention['count']
                
                mentions_info += f"{i}. **@{username}** - {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            
            await update.message.reply_text(mentions_info, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≥—Ä—É–ø–ø—ã: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = update.message
            if not message or not message.text:
                return
            
            chat_id = message.chat.id
            user_id = message.from_user.id
            text = message.text
            message_id = message.message_id
            date = message.date
            
            display_name = self._get_user_display_name(message.from_user)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.db.save_message(
                chat_id=chat_id,
                user_id=user_id,
                message_id=message_id,
                text=text,
                date=date,
                display_name=display_name
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            if message.chat.type in ['group', 'supergroup']:
                self.db.save_chat_info(
                    chat_id=chat_id,
                    title=message.chat.title,
                    chat_type=message.chat.type,
                    member_count=getattr(message.chat, 'member_count', None)
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            self.db.update_user_activity(
                chat_id=chat_id,
                user_id=user_id,
                display_name=display_name
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            mentions = self.text_analyzer.extract_mentions(text)
            tasks = self.text_analyzer.extract_tasks(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for mention in mentions:
                self.db.save_mention(
                    chat_id=chat_id,
                    user_id=user_id,
                    mentioned_user_id=mention['user_id'],
                    message_id=message_id,
                    date=date
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏
            for task in tasks:
                self.task_manager.create_task(
                    chat_id=chat_id,
                    creator_id=user_id,
                    assignee_id=task.get('assignee_id'),
                    description=task['description'],
                    priority=task.get('priority', 'medium'),
                    deadline=task.get('deadline')
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _get_user_display_name(self, user) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user.first_name and user.last_name:
            return f"{user.first_name} {user.last_name}"
        elif user.first_name:
            return user.first_name
        elif user.username:
            return f"@{user.username}"
        else:
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
    
    async def handle_webhook(self, update_dict: Dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
        try:
            update = Update.de_json(update_dict, self.application.bot)
            
            if update.update_id in self.processed_updates:
                return
            
            self.processed_updates.add(update.update_id)
            
            if len(self.processed_updates) > 1000:
                self.processed_updates.clear()
            
            user_id = update.effective_user.id if update.effective_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            chat_id = update.effective_chat.id if update.effective_chat else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.update_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–∞—Ç–µ {chat_id}")
            
            if update.message:
                await self.handle_message(update, None)
            
            if update.message and update.message.text and update.message.text.startswith('/'):
                await self.application.process_update(update)
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.update_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = SimpleChatBot()

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        update_dict = request.get_json()
        
        if not update_dict:
            return jsonify({'status': 'error', 'message': 'No data received'}), 400
        
        update_id = update_dict.get('update_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {update_id}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        def process_webhook():
            try:
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    loop.run_until_complete(bot.handle_webhook(update_dict))
                finally:
                    if not loop.is_closed():
                        loop.close()
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=process_webhook)
        thread.daemon = True
        thread.start()
        
        logger.info(f"Webhook {update_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return jsonify({'status': 'ok'}), 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook endpoint: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        db_status = "healthy" if bot.db else "unhealthy"
        
        return jsonify({
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'database': db_status,
            'version': '2.0-simple'
        }), 200
        
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/', methods=['GET'])
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'service': 'Chat Analyzer Bot (Simple)',
        'status': 'running',
        'version': '2.0-simple',
        'timestamp': datetime.now().isoformat()
    }), 200

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    app.run(host='0.0.0.0', port=8080, threaded=True)
